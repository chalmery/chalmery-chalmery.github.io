<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yangccBlog</title>
  
  
  <link href="https://www.yangcc.top/atom.xml" rel="self"/>
  
  <link href="https://www.yangcc.top/"/>
  <updated>2023-07-14T16:00:00.000Z</updated>
  <id>https://www.yangcc.top/</id>
  
  <author>
    <name>杨超超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java版本管理</title>
    <link href="https://www.yangcc.top/2427860074/"/>
    <id>https://www.yangcc.top/2427860074/</id>
    <published>2023-07-14T16:00:00.000Z</published>
    <updated>2023-07-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在接触前端的时候发现了nvm这样的工具，可以一行命令切换使用的node版本，非常方便，作为一个Java程序员，java是否有版本管理工具呢？</p><h2 id="jenv"><a href="#jenv" class="headerlink" title="jenv"></a><a class="link"   href="https://www.jenv.be/" >jenv <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></h2><blockquote><p>官网的解释: jEnv is a command line tool to help you forget how to set the JAVA_HOME environment variable</p><p>使用一条命令可以轻松配置JAVA_HOME到环境变量。</p></blockquote><p>用法是：</p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jenv &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令参考：</span></span><br><span class="line">commands   列出所有可用的 jenv 命令</span><br><span class="line">local       设置或显示本地应用程序特定的 Java 版本</span><br><span class="line">global     设置或显示全局 Java 版本</span><br><span class="line">shell      设置或显示 shell 特定的 Java 版本</span><br><span class="line">rehash      刷新 jenv shims（安装可执行文件后运行此命令）</span><br><span class="line">version     显示当前Java版本及其来源</span><br><span class="line">versions    列出 jenv 可用的所有 Java 版本</span><br><span class="line">which      显示可执行文件的完整路径</span><br><span class="line">whence     列出包含给定可执行文件的所有 Java 版本</span><br><span class="line">add         添加 将 JDK 添加到 jenv 中</span><br></pre></td></tr></table></figure></div><h2 id="archlinuxjdk"><a href="#archlinuxjdk" class="headerlink" title="archlinuxjdk"></a>archlinuxjdk</h2><p>在 archlinux 中提供了命令：archlinuxjdk用来管理jdk版本，参考 <a class="link"   href="https://wiki.archlinuxcn.org/wiki/Java#%E5%9C%A8JVM%E9%97%B4%E5%88%87%E6%8D%A2" >archwiki <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">archlinux-java &lt;COMMAND&gt;</span><br><span class="line"></span><br><span class="line">COMMAND:</span><br><span class="line">status                    列出已安装并启用的 Java 环境</span><br><span class="line">get                          返回设置为默认的 Java 环境的短名称</span><br><span class="line">set &lt;JAVA_ENV&gt;强制 &lt;JAVA_ENV&gt; 设置为默认值</span><br><span class="line">unset                取消当前默认 Java 环境</span><br><span class="line">fix                       修复无效/损坏的默认 Java 环境配置</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在接触前端的时候发现了nvm这样的工具，可以一行命令切换使用的node版本，非常方便，作为一个Java程序员，java是否有版本管理工具呢？&lt;/p&gt;
&lt;h2 id=&quot;jenv&quot;&gt;&lt;a href=&quot;#jenv&quot; class=&quot;headerlink&quot; title=&quot;jenv&quot;&gt;</summary>
      
    
    
    
    <category term="工具" scheme="https://www.yangcc.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Java" scheme="https://www.yangcc.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-发布订阅</title>
    <link href="https://www.yangcc.top/1698904213/"/>
    <id>https://www.yangcc.top/1698904213/</id>
    <published>2023-07-13T16:00:00.000Z</published>
    <updated>2023-07-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h1><p>观察者模式（Observer Pattern），或者叫发布订阅，是一种行为型设计模式，它定义了一种一对多的依赖关系，使得多个观察者对象可以同时监听和被通知被观察者对象的状态变化。</p><blockquote><p>观察者模式的主要特点如下：</p><ol><li>主题和观察者的解耦：观察者模式通过定义抽象主题（Subject）和抽象观察者（Observer）来实现主题和观察者的解耦。主题对象并不直接依赖于具体的观察者，而是依赖于观察者的抽象。这样可以使主题对象和具体观察者对象相互独立，彼此之间的耦合度降低。</li><li>一对多的依赖关系：观察者模式中，一个主题对象可以有多个观察者对象订阅并监听它的状态变化。当主题对象的状态发生变化时，所有依赖于它的观察者对象都会收到相应的通知并进行相应的处理。这种一对多的依赖关系使得我们可以方便地增加或删除观察者对象，而不需要修改主题对象的代码。</li><li>松散耦合的设计：观察者模式通过松散耦合的设计，使得主题对象和观察者对象之间的依赖关系变得松散。主题对象只需要知道观察者对象实现了特定的观察者接口，而不需要了解具体的观察者对象。这样可以使得系统更加灵活，易于扩展和维护。</li><li>发布-订阅机制：观察者模式可以看作是一种发布-订阅（Publish-Subscribe）机制的实现。主题对象充当发布者，观察者对象充当订阅者。主题对象维护着一组观察者对象，并在状态变化时主动通知观察者对象，从而实现发布-订阅的通信机制。</li></ol><p>观察者模式在实际应用中非常常见，例如事件驱动编程、GUI开发、消息队列等。它可以帮助我们实现对象之间的松散耦合，提高系统的可维护性、扩展性和灵活性。</p></blockquote><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>发布订阅核心就是一个Map或者数组之类的容器，存储所有注册的事件，以及对应的回调。而具体每件事情完成后，告诉事件中心，我要触发某个事件的回调，事件中心从容器中找到对应的事件，然后执行函数。可以发现整体是解耦的状态，事件触发者，和事件的函数是分离的，通过中间者eventManager来沟通。</p><h2 id="框架的使用"><a href="#框架的使用" class="headerlink" title="框架的使用"></a>框架的使用</h2><p>上述概念有没有很熟悉，这个和后端常用中间件MQ，桌面框架electron中的一些地方很像？其实这些地方都用到了这个设计模式。</p><ul><li>在我们使用消息队列，无论是rabbitMq还是RocketMq的时候，都是一样的，我们往指定的topic中发送消息，然后监听这个topic的消息，然后处理，和上述图的结构一样，本质就是一个发布订阅的设计模式。</li><li>electron框架中通过ipcRenderer来管理事件，send来触发事件，on来注册遇到这个事件要做什么事情</li></ul><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">electron.<span class="property">ipcRenderer</span>.<span class="title function_">send</span>(<span class="string">&#x27;eventName&#x27;</span>, data);</span><br><span class="line"><span class="comment">//注册事件的处理动作</span></span><br><span class="line">electron.<span class="property">ipcRenderer</span>.<span class="title function_">send</span>(<span class="string">&#x27;eventName&#x27;</span>, func);</span><br></pre></td></tr></table></figure></div><h2 id="日常开发如何使用"><a href="#日常开发如何使用" class="headerlink" title="日常开发如何使用"></a>日常开发如何使用</h2><h3 id="1-在前端开发中使用"><a href="#1-在前端开发中使用" class="headerlink" title="1 在前端开发中使用"></a>1 在前端开发中使用</h3><p>在前端开发中，我们会发现组件传值在某些情况异常复杂，甚至无法做到，我们会发现，常见的就是父子传值，如果是两个没有嵌套关系的组件传值呢？貌似很复杂，常常可能就会用一个中介来做这件事，比如：redux，vuex之类的状态管理，这边存，那边取。其实可以直接运用这个设计模式来做到。</p><p>代码参考：<a class="link"   href="https://github.com/chalmery/electron-music/blob/master/src/event/eventManager.js"  title="发布订阅">发布订阅 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h3 id="2-在后端开发中使用"><a href="#2-在后端开发中使用" class="headerlink" title="2 在后端开发中使用"></a>2 在后端开发中使用</h3><p>在后端开发中，我们常见的一个业务场景就是，做了一件事之后，要做一些事情，比如：</p><ul><li>要发mq</li><li>要发通知</li><li>要存es</li><li>要刷新缓存</li></ul><p>这些事情常常是异步的，和这件事情没有关系，开发中常常会开启一个线程池，或者发一个mq异步里去处理。这样当然是可以的但是有这些缺点：</p><ul><li>整体不够抽象化，没有把这类事情做一个抽象，代码不够规范化。</li><li>有些时候要做的事情，比如要发mq，要存es等，没有前后顺序，也就是这些事件是互不干扰的，可以在不同的线程处理，而mq通常创建一个监听后，顺序的去做这些事情，只发挥了一个线程的作用</li></ul><p>代码参考：<a class="link"   href="https://github.com/chalmery/code/blob/master/design/src/main/java/top/yangcc/subscribe/EventManager.java"  title="发布订阅">发布订阅 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>像上述代码示例的内容，在下面Add 事件发布的时候，EventManager就会依次开启线程来调用监听。SendMqEventListener，SendSlsEventListener会分两个线程来执行</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//省略业务代码</span></span><br><span class="line">        <span class="comment">//做完事情之后，发送通知</span></span><br><span class="line">        <span class="type">AddEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddEntity</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;code&quot;</span>,<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">        EventManager.publish(EventEnum.ADD,entity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;发布订阅&quot;&gt;&lt;a href=&quot;#发布订阅&quot; class=&quot;headerlink&quot; title=&quot;发布订阅&quot;&gt;&lt;/a&gt;发布订阅&lt;/h1&gt;&lt;p&gt;观察者模式（Observer Pattern），或者叫发布订阅，是一种行为型设计模式，它定义了一种一对多的依赖关系，使得多个</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://www.yangcc.top/tags/Java/"/>
    
    <category term="JavaScript" scheme="https://www.yangcc.top/tags/JavaScript/"/>
    
    <category term="设计模式" scheme="https://www.yangcc.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>规则引擎(一)</title>
    <link href="https://www.yangcc.top/4078686809/"/>
    <id>https://www.yangcc.top/4078686809/</id>
    <published>2023-07-08T16:00:00.000Z</published>
    <updated>2023-07-08T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为自己接触的项目做的是一个风控系统，涉猎到了规则，流程等知识，转眼一年多了，也没咋回顾这块知识点，今天就总结下规则引起这块的知识点，本文重点讲解用到的表达式相关的算法的逻辑。</p><h2 id="一-表达式和操作符"><a href="#一-表达式和操作符" class="headerlink" title="一 表达式和操作符"></a>一 表达式和操作符</h2><p>我们日常计算，或者看到的数学运算表达式，都是中缀表达式 ，看起来是这样的：(1 + 2) * 3 + 4，其中，加减乘除这些符号就叫<strong>操作符</strong>，不过，这样的表达式，不过这样的表达式对于计算机并不好识别，我们可以回顾下，算法中的三种表达式的特点：</p><h3 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1 表达式"></a>1 表达式</h3><p>前缀、中缀和后缀表达式都是用来表示数学表达式的方式，它们的主要区别在于运算符的位置。</p><ol><li>前缀表达式（也称为波兰表达式）：运算符位于操作数之前。例如，表达式 “2 + 3” 的前缀表示为 “+ 2 3”。</li><li>中缀表达式：运算符位于操作数之间。这是我们通常使用的方式，例如，表达式 “2 + 3” 就是中缀表达式。</li><li>后缀表达式（也称为逆波兰表达式）：运算符位于操作数之后。例如，表达式 “2 + 3” 的后缀表示为 “2 3 +”。</li></ol><p>为了更好地理解这些表达式之间的区别，让我们以一个简单的表达式为例：”(4 + 5) * 6”。</p><ul><li>中缀表达式：(4 + 5) * 6</li><li><em>前缀表达式：</em> + 4 5 6</li><li>后缀表达式：4 5 + 6 *</li></ul><p>可以看到，中缀表达式需要使用括号来表示运算符的优先级，而前缀和后缀表达式通过运算符的位置来明确表达式的结构和运算顺序。</p><p>对于计算机来说，后缀表达式在求值时更容易处理，因为它不需要括号和优先级的考虑。因此，在编写计算机程序或使用栈数据结构进行表达式求值时，通常会将中缀表达式转换为后缀表达式来简化计算过程。</p><h3 id="2-操作符"><a href="#2-操作符" class="headerlink" title="2 操作符"></a>2 操作符</h3><p>操作符又分为两种：逻辑操作符和算术操作符，逻辑操作符用于执行逻辑运算，主要用于布尔逻辑（真和假的逻辑值）的计算。以下是常见的逻辑操作符：</p><ol><li>逻辑与（AND）：表示为 “&amp;&amp;” 或 “and”，用于判断多个条件是否同时成立。如果两个条件都为真，则结果为真，否则为假。</li><li>逻辑或（OR）：表示为 “||” 或 “or”，用于判断多个条件中至少有一个是否成立。如果任何一个条件为真，则结果为真，只有当所有条件都为假时结果才为假。</li><li>逻辑非（NOT）：表示为 “!” 或 “not”，用于对一个条件的逻辑值进行取反。如果条件为真，则结果为假，如果条件为假，则结果为真。</li></ol><p>算术操作符用于执行数学运算，用于处理数值和执行各种数学计算。以下是常见的算术操作符：</p><ol><li>加法（Addition）：表示为 “+”，用于将两个数值相加。</li><li>减法（Subtraction）：表示为 “-“，用于从一个数值中减去另一个数值。</li><li>乘法（Multiplication）：表示为 “*”，用于将两个数值相乘。</li><li>除法（Division）：表示为 “&#x2F;“，用于将一个数值除以另一个数值。</li><li>取模（Modulus）：表示为 “%”，用于计算两个数值相除后的余数。</li><li>幂运算（Exponentiation）：表示为 “^”，用于将一个数值提升到指定的幂次方。</li></ol><h2 id="二-中缀表达式转为后缀表达式"><a href="#二-中缀表达式转为后缀表达式" class="headerlink" title="二 中缀表达式转为后缀表达式"></a>二 中缀表达式转为后缀表达式</h2><p>工作中会常见到这样的需求：页面配置一个复杂的规则，比如：!A||B&amp;&amp;(C||D) ，存储起来，在使用的时候填充不同的值之后进行运算，这个时候就需要将上述的中缀表达式做转换，变为后缀表达式进行后续运算操作。<br>这个算法的核心如下：<br>创建一个栈和一个存储结果的字符串，栈用来存放操作符，结果用于拼接数字和操作符。然后从左到右遍历表达式，算法有这样的规则：</p><ul><li>遇到左括弧( 入栈</li><li>遇到右括弧) 循环出栈，直到遇到相匹配的左括弧，将出栈符号拼接到结果字符串</li><li>遇到符号，循环出栈，将优先级大于等于当前符号的操作符出栈，遇到小于当前符号的操作符停止循环，将出栈符号拼接到结果字符串，最后将当前符号入栈</li><li>遇到字符，则拼接到结果的字符串</li><li>当表达式循环结束时，将站内的全部符号依次取出并且拼接到结果的字符串</li></ul><p>java实现代码，参考：<a class="link"   href="https://github.com/chalmery/rule/blob/main/core/src/main/java/com/github/chalmery/rule/utils/ExpressUtils.java" >github代码 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>过程示例图如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/converter.png"                      alt="表达式转换"                ></p><h2 id="三-后缀表达式如何使用"><a href="#三-后缀表达式如何使用" class="headerlink" title="三 后缀表达式如何使用"></a>三 后缀表达式如何使用</h2><p>上面的算法，我们已经得到了一个后缀表达式，这个表达式的运算逻辑是怎样的呢？我们一起来看下：</p><p>我们需要一个栈来存放所有的操作数，从左到右遍历符号，具体运算规则如下：</p><ul><li>遇到操作数，则入栈</li><li>遇到操作符，则出栈两个操作数进行计算，将计算的结果继续入栈</li></ul><p>下面以算术表达式为例，一个整体的运算流程如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/execute.png"                      alt="规则解析"                ></p><p>这样很方便的就实现了一个复杂算术表达式的运算，而逻辑表达式也是一样运算方式，比如||，&amp;&amp; 唯一区别就是每次去出两个字符。</p><p>具体在规则引擎中如何使用，请听下次讲解。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为自己接触的项目做的是一个风控系统，涉猎到了规则，流程等知识，转眼一年多了，也没咋回顾这块知识点，今天就总结下规则引起这块的知识点，本文重点讲解用到的表达式相关的算法的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;一-表达式和操作符&quot;&gt;&lt;a href=&quot;#一-表达式和操作符&quot; clas</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://www.yangcc.top/tags/Java/"/>
    
    <category term="设计模式" scheme="https://www.yangcc.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="规则引擎" scheme="https://www.yangcc.top/tags/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
    
    <category term="算法" scheme="https://www.yangcc.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Electron(一)</title>
    <link href="https://www.yangcc.top/2402782093/"/>
    <id>https://www.yangcc.top/2402782093/</id>
    <published>2023-06-21T16:00:00.000Z</published>
    <updated>2023-06-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Electron-一"><a href="#Electron-一" class="headerlink" title="Electron(一)"></a>Electron(一)</h1><p>Electron是一个js桌面端框架，让html，js 打包为桌面应用成为可能，已经有非常多的应用使用了这门技术，如：vscode，notion，figma，思源笔记等等</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2024-05-06_15-04-27.png"                      alt="image"                ></p><h2 id="一-整体交互形式"><a href="#一-整体交互形式" class="headerlink" title="一 整体交互形式"></a>一 整体交互形式</h2><p>桌面应用最重要的是什么，或者说和浏览器页面有什么区别？大的来说就是可以和操作系统交互，那么什么叫可以和操作系统交互？让我们回顾下浏览器，浏览器就像一个盒子，里面的所有页面的权利是有限的，就比如，</p><ul><li>我想在浏览器自己写的一个html页面通过js函数，在文档这个文件夹下创建一个文件，或者修改一个文件</li><li>调用系统通知api，使用系统通知</li><li>修改系统音量？</li></ul><p>这些都是做不到的，这些都涉及了操作系统的api，那electron是如何做到的呢，我们看下这个图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2024-05-06_15-04-35.png"                      alt="image"                ></p><p>Electron就相当于一个中间层，为js提供了一个曲线访问系统api的能力，做任何和系统有关的操作，都要通过electron</p><p>一个简单的例子，我想通过，文件选择器，拿到一个文件的路径，该如何实现？你可能会想到，浏览器也可以呀，通过选择器，选择一个文件，还要Electron干嘛？</p><p>是没问题，可以选到一个文件，但是文件的路径是获取不到的，简单思考下，如果一个普通的网页，点击就能获取到你本机文件的路径，甚至别的操作系统信息，你做为浏览器的开发者会允许这样吗？这样对浏览器使用者来讲显然是非常危险的，点开个网页信息泄密了，甚至电脑上文件丢了。</p><p>因此，我们要使用的文件选择器是操作系统的文件选择器，这个显然是js办不到的，因此有了Electron，它提供了这样的api：文档详见：<a class="link"   href="https://www.electronjs.org/zh/docs/latest/api/dialog" >https://www.electronjs.org/zh/docs/latest/api/dialog <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;dialog&#125; <span class="keyword">from</span> <span class="string">&quot;electron&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">open</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> files = dialog.<span class="title function_">showOpenDialogSync</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;选择文件路径&#x27;</span>,</span><br><span class="line">        <span class="attr">properties</span>: [<span class="string">&#x27;openDirectory&#x27;</span>, <span class="string">&#x27;multiSelections&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files)</span><br><span class="line">    <span class="keyword">return</span> files</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>文件选择器是有了，我们该如何通知Electron呢？换句话说就是，上面的js函数是显示层调用不到的，因此Electron提供了一种方式，让我们可以与它交互。这种方式类似js的发布订阅模型，发布一个事件，消费者监听事件。</p><p>文档详见：<a class="link"   href="https://www.electronjs.org/zh/docs/latest/api/ipc-renderer" >https://www.electronjs.org/zh/docs/latest/api/ipc-renderer <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>js端通过ipcRenderer.send发送一个事件通过Electron</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="variable language_">window</span>.<span class="property">electron</span></span><br><span class="line"></span><br><span class="line">electron.<span class="property">ipcRenderer</span>.<span class="title function_">send</span>(<span class="string">&#x27;事件名称&#x27;</span>,data)</span><br></pre></td></tr></table></figure></div><p>electron端通过ipcMain.on监听js端发送过来的事件，那当这件事情处理完成了，想要告诉js端怎么办？通过event.reply发送一个事件，携带数据给js，和上面的ipcRenderer.send是类似的</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ipcMain&#125; <span class="keyword">from</span> <span class="string">&quot;electron&quot;</span></span><br><span class="line"></span><br><span class="line"> ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;事件名称&#x27;</span>,(event, data)) =&gt; &#123;</span><br><span class="line">        <span class="comment">//处理</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//回调</span></span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;新的事件名称&#x27;</span>, 要返回的数据)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></div><p>js端该如何处理呢？以React为例：useEffect中，通过ipcRenderer.on，监听这个事件，然后处理，一定要在[]这个useEffect，代表页面创建就运行这个函数，监听这个事件，在return中删除这个事件，不然每次每次页面加载都会创建一个监听，这样会越建越多</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//处理Electron端发送的事件</span></span><br><span class="line">    electron.<span class="property">ipcRenderer</span>.<span class="title function_">on</span>(<span class="string">&#x27;事件名称&#x27;</span>, <span class="function">(<span class="params">event, 数据</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//处理</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      electron.<span class="property">ipcRenderer</span>.<span class="title function_">removeAllListeners</span>(<span class="string">&#x27;事件名称&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, []);</span><br></pre></td></tr></table></figure></div><p>到这里就完成了一个交互，是不是很简单。</p><h2 id="二-打包"><a href="#二-打包" class="headerlink" title="二 打包"></a>二 打包</h2><p>打包全靠配置，这个是我的配置：</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @see https://www.electron.build/configuration/configuration</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  appId<span class="punctuation">:</span> <span class="string">&quot;electron-music&quot;</span><span class="punctuation">,</span></span><br><span class="line">  productName<span class="punctuation">:</span> <span class="string">&quot;electron-music&quot;</span><span class="punctuation">,</span></span><br><span class="line">  copyright<span class="punctuation">:</span> <span class="string">&quot;Copyright © 2023 $&#123;author&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  asar<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  directories<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    output<span class="punctuation">:</span> <span class="string">&quot;release&quot;</span><span class="punctuation">,</span></span><br><span class="line">    buildResources<span class="punctuation">:</span> <span class="string">&quot;public&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  files<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  win<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    icon<span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    target<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        target<span class="punctuation">:</span> <span class="string">&quot;dir&quot;</span><span class="punctuation">,</span></span><br><span class="line">        arch<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;x64&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        target<span class="punctuation">:</span> <span class="string">&quot;nsis&quot;</span><span class="punctuation">,</span></span><br><span class="line">        arch<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="string">&quot;x64&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  nsis<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;oneClick&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 创建一键安装程序还是辅助安装程序（默认是一键安装）</span></span><br><span class="line">    <span class="attr">&quot;allowElevation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否允许请求提升，如果为false，则用户必须使用提升的权限重新启动安装程序 （仅作用于辅助安装程序）</span></span><br><span class="line">    <span class="attr">&quot;allowToChangeInstallationDirectory&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否允许修改安装目录 （仅作用于辅助安装程序）</span></span><br><span class="line">    <span class="attr">&quot;installerIcon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 安装程序图标的路径</span></span><br><span class="line">    <span class="attr">&quot;uninstallerIcon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 卸载程序图标的路径</span></span><br><span class="line">    <span class="attr">&quot;installerHeader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 安装时头部图片路径（仅作用于辅助安装程序）</span></span><br><span class="line">    <span class="attr">&quot;installerHeaderIcon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 安装时标题图标（进度条上方）的路径（仅作用于一键安装程序）</span></span><br><span class="line">    <span class="attr">&quot;installerSidebar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 安装完毕界面图片的路径，（仅作用于辅助安装程序）</span></span><br><span class="line">    <span class="attr">&quot;uninstallerSidebar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 开始卸载界面图片的路径（仅作用于辅助安装程序）</span></span><br><span class="line">    <span class="attr">&quot;uninstallDisplayName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron-music-$&#123;version&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 控制面板中的卸载程序显示名称</span></span><br><span class="line">    <span class="attr">&quot;createDesktopShortcut&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否创建桌面快捷方式</span></span><br><span class="line">    <span class="attr">&quot;createStartMenuShortcut&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否创建开始菜单快捷方式</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script/installer.nsi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// NSIS包含定制安装程序脚本的路径，安装过程中自行调用  (可用于写入注册表 开机自启动等操作)</span></span><br><span class="line">    <span class="attr">&quot;script&quot;</span><span class="punctuation">:</span> <span class="string">&quot;script/installer.nsi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 用于自定义安装程序的NSIS脚本的路径</span></span><br><span class="line">    <span class="attr">&quot;deleteAppDataOnUninstall&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否在卸载时删除应用程序数据（仅作用于一键安装程序）</span></span><br><span class="line">    <span class="attr">&quot;runAfterFinish&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 完成后是否运行已安装的应用程序（对于辅助安装程序，应删除相应的复选框）</span></span><br><span class="line">    <span class="attr">&quot;menuCategory&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否为开始菜单快捷方式和程序文件目录创建子菜单，如果为true，则使用公司名称</span></span><br><span class="line">    <span class="attr">&quot;perMachine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//给机器上所有用户安装</span></span><br><span class="line">    <span class="attr">&quot;language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2052&quot;</span></span><br><span class="line">    <span class="comment">//安装语言(中文)</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  mac<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    icon<span class="punctuation">:</span> &#x27;public/icons/music256x256.png&#x27;<span class="punctuation">,</span></span><br><span class="line">    category<span class="punctuation">:</span> &#x27;Productivity&#x27;<span class="punctuation">,</span></span><br><span class="line">    target<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        target<span class="punctuation">:</span> &#x27;default&#x27;<span class="punctuation">,</span></span><br><span class="line">        arch<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          &#x27;arm64&#x27;<span class="punctuation">,</span></span><br><span class="line">          &#x27;x64&#x27;</span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  linux<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    icon<span class="punctuation">:</span> <span class="string">&quot;public/icons/music256x256.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    target<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;AppImage&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;tar.gz&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Audio&quot;</span><span class="punctuation">,</span></span><br><span class="line">    artifactName<span class="punctuation">:</span> <span class="string">&quot;$&#123;productName&#125;-Linux-$&#123;version&#125;.$&#123;ext&#125;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>参考:  <a class="link"   href="https://github.com/chalmery/electron-music"  title="我的音乐播放器项目">我的音乐播放器项目 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><h2 id="三-注意事项"><a href="#三-注意事项" class="headerlink" title="三 注意事项"></a>三 注意事项</h2><h3 id="1-在linux下窗口关闭前做一件事"><a href="#1-在linux下窗口关闭前做一件事" class="headerlink" title="1 在linux下窗口关闭前做一件事"></a>1 在linux下窗口关闭前做一件事</h3><p>看环境，比如kde下是做不到比如隐藏窗口的，在kde下，点击关闭按钮，window对象对直接就销毁了。（曲线方式，我们可以不用系统自带的顶栏，自己实现一个，这样就不会有这样的问题了）</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><h3 id="2-linux-下，英伟达显卡涉及到动画的页面报错（暂未解决）"><a href="#2-linux-下，英伟达显卡涉及到动画的页面报错（暂未解决）" class="headerlink" title="2 linux 下，英伟达显卡涉及到动画的页面报错（暂未解决）"></a>2 linux 下，英伟达显卡涉及到动画的页面报错（暂未解决）</h3><p>报错内容</p><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libva <span class="attr">error</span>: <span class="title function_">vaGetDriverNameByIndex</span>() failed <span class="keyword">with</span> unknown libva error, driver_name = (<span class="literal">null</span>)</span><br></pre></td></tr></table></figure></div><p>‍</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Electron-一&quot;&gt;&lt;a href=&quot;#Electron-一&quot; class=&quot;headerlink&quot; title=&quot;Electron(一)&quot;&gt;&lt;/a&gt;Electron(一)&lt;/h1&gt;&lt;p&gt;Electron是一个js桌面端框架，让html，js 打包为桌面应用成</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="JavaScript" scheme="https://www.yangcc.top/tags/JavaScript/"/>
    
    <category term="Electron" scheme="https://www.yangcc.top/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Rust学习(三)：结构体枚举和模式匹配</title>
    <link href="https://www.yangcc.top/379577363/"/>
    <id>https://www.yangcc.top/379577363/</id>
    <published>2022-05-14T16:00:00.000Z</published>
    <updated>2022-05-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Struct"><a href="#1-Struct" class="headerlink" title="1 Struct"></a>1 Struct</h2><p>结构体实例化的顺序可以不与定义时候一样，但是所有属性都得实例化。结构体实例声明为可变的时候其所有属性都是可变的。</p><h3 id="基本的结构体"><a href="#基本的结构体" class="headerlink" title="基本的结构体"></a>基本的结构体</h3><p>声明一个结构体</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    name : <span class="type">String</span>,</span><br><span class="line">    email : <span class="type">String</span>,</span><br><span class="line">    sign_in_count : <span class="type">u64</span>,</span><br><span class="line">    archive : <span class="type">bool</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut  </span><span class="variable">user</span> = User&#123;</span><br><span class="line">        email : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ycc@123.com&quot;</span>),</span><br><span class="line">        name : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ycc&quot;</span>),</span><br><span class="line">        sign_in_count : <span class="number">1</span>,</span><br><span class="line">        archive : <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,user.email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>struct作为函数的返回值：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">fun</span>()<span class="punctuation">-&gt;</span> User&#123;</span><br><span class="line">    User&#123;</span><br><span class="line">        email : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ycc@123.com&quot;</span>),</span><br><span class="line">        name : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ycc&quot;</span>),</span><br><span class="line">        sign_in_count : <span class="number">1</span>,</span><br><span class="line">        archive : <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>字段初始化简写的方式，省略赋值的操作</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">build_user</span>(name:<span class="type">String</span>,email:<span class="type">String</span>) <span class="punctuation">-&gt;</span>User&#123;</span><br><span class="line">    User&#123;</span><br><span class="line">        <span class="comment">// email : email,</span></span><br><span class="line">        <span class="comment">// name : name,</span></span><br><span class="line">        email,</span><br><span class="line">        name,</span><br><span class="line">        sign_in_count : <span class="number">1</span>,</span><br><span class="line">        archive : <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当想基于一个struct来创建一个新的struct的时候，可以使用下面的语法糖：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">user1</span> = User&#123;</span><br><span class="line">        email : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ycc@123.com&quot;</span>),</span><br><span class="line">        name : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ycc&quot;</span>),</span><br><span class="line">        sign_in_count : <span class="number">1</span>,</span><br><span class="line">        archive : <span class="literal">false</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">user2</span> = User&#123;</span><br><span class="line">        email : <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;233@gmail.com&quot;</span>),</span><br><span class="line">        ..user1</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="Tuple-Struct"><a href="#Tuple-Struct" class="headerlink" title="Tuple Struct"></a>Tuple Struct</h3><p>元组结构体，适用于给tuple分类型，让这个元组不同于其他的元组，比如可以声明一个元组结构体来描述，颜色RGB，正方形，圆。。。等等</p><p>先复习下元组：元组内可以放入不同类型的值</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">trple</span> = (<span class="number">1</span>,<span class="string">&quot;a&quot;</span>,<span class="number">3</span>); <span class="comment">// 元组</span></span><br><span class="line">    <span class="keyword">let</span> (a,b,c) = trple; <span class="comment">// 解构</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>元组结构体：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="comment">// 元组结构体</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">white</span> = <span class="title function_ invoke__">Color</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">orange</span> = <span class="title function_ invoke__">Color</span>(<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Color</span>(<span class="type">i32</span>,<span class="type">i32</span>,<span class="type">i32</span>);</span><br></pre></td></tr></table></figure></div><h3 id="没有任何字段的Struct"><a href="#没有任何字段的Struct" class="headerlink" title="没有任何字段的Struct"></a>没有任何字段的Struct</h3><p>可以定义一个没有任何内容的struct，叫做 <code>Unit-like struct</code>，可以实现抽象的描述，但是又不需要存储元素内容的场景可以适用。</p><h3 id="struct的所有权"><a href="#struct的所有权" class="headerlink" title="struct的所有权"></a>struct的所有权</h3><p>Struct里面可以放数据，也可以放引用（生命周期），生命周期保证只要struct实例是有效的，那么里面的引用就是有效的，如果使用引用却不使用生命周期就会报错</p><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><p>实现计算矩形的面积：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    length: <span class="type">u32</span>,</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_area</span>(r : &amp;Rectangle) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">    r.length * r.width</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = Rectangle&#123;</span><br><span class="line">        length:<span class="number">10</span>,</span><br><span class="line">        width:<span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">area</span> = <span class="title function_ invoke__">get_area</span>(&amp;r);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,area);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注意这里传入的是结构体的引用，因此，在 方法执行结束，main方法依然有 Rectangle的实例r的所有权，因此还可以打印：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,r)</span><br></pre></td></tr></table></figure></div><p>但如果直接这么打印编译会报错：提示没有实现这个接口，或则使用第二种方法</p><blockquote><p>&#x3D; help: the trait <code>std::fmt::Display</code> is not implemented for <code>Rectangle</code><br>&#x3D; note: in format strings you may be able to use <code>&#123;:?&#125;</code> (or {:#?} for pretty-print) instead</p></blockquote><p>而当你使用第二种方式打印的话还会报错：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,r)</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>,r) <span class="comment">//美化打印</span></span><br></pre></td></tr></table></figure></div><p>提示你没有时间Debug接口，或者使用这个注解，放在结构体上面，</p><blockquote><p>&#x3D; help: the trait <code>Debug</code> is not implemented for <code>Rectangle</code><br>&#x3D; note: add <code>#[derive(Debug)]</code> to <code>Rectangle</code> or manually <code>impl Debug for Rectangle</code></p></blockquote><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法表示与这个结构体有关的函数，使用关键字 <code>impl</code>来表示，可以有很多个代码快，除了特别的方法，一般的方法第一个参数总是自己，用 <code>&amp;self</code>表示,方法调用可以省略自身的引用入参</p><ul><li>self 可以是 借用：<code>&amp;self</code>，也可以是：<code>safe</code>表示获取所有权，也可以是可变的，也就是说和普通的参数没啥区别</li></ul><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_area</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.length * <span class="keyword">self</span>.width</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = Rectangle&#123;</span><br><span class="line">        length:<span class="number">10</span>,</span><br><span class="line">        width:<span class="number">10</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">area</span> = r.<span class="title function_ invoke__">get_area</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,area);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>方法调用的运算符</p><p>在c&#x2F;c++中方法调用，是这样的：object-&gt;someting() 和 (*object).someting()这两者等价</p><ul><li>object是个指针，星号表示解指针，变为对象</li><li>Rust提供了自动的引用，或者解引用，在调用方法的时候，rust会自动的补上，&amp;，&amp; mut 等，来匹配上方法的入参</li></ul><p>关联函数：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">square</span>(size:<span class="type">u32</span>) <span class="punctuation">-&gt;</span> Rectangle &#123;</span><br><span class="line">        Rectangle&#123;</span><br><span class="line">            length :size,</span><br><span class="line">            width :size,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="comment">// 关联函数的调用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">squ</span> = Rectangle::<span class="title function_ invoke__">square</span>(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>,squ)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-枚举"><a href="#2-枚举" class="headerlink" title="2 枚举"></a>2 枚举</h2><p>定义一个枚举，不过看了半天，没有发现和java类似的那种常量形式的枚举定义方式</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">IP_ADDRESS</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">V4</span>(<span class="type">String</span>,<span class="type">u32</span>),</span><br><span class="line">    V6,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>标准库的Option <code>&lt;T&gt;</code>枚举包含在预导入模块中的，可以直接使用，其结构为：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    <span class="title function_ invoke__">Some</span>( T),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>当想使用包裹着值的，y变量时候，提示需要转换才行，不能直接使用，这样就保证了空安全的情况</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> : <span class="type">i8</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> : <span class="type">Option</span>&lt;<span class="type">i8</span>&gt; = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//let z = y.expect(&quot;i8&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">sum</span> = x + z;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="3-模式匹配"><a href="#3-模式匹配" class="headerlink" title="3 模式匹配"></a>3 模式匹配</h2><p>模式匹配必须穷举所有的可能，否则编译不予通过</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">value_in_cents</span>(coin: Coin) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Lucky penny!&quot;</span>);</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::Quarter =&gt; <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>附带值的模式匹配：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="comment">// 这样可以立刻看到州的名称</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">UsState</span> &#123;</span><br><span class="line">    Alabama,</span><br><span class="line">    Alaska,</span><br><span class="line">    <span class="comment">// --snip--</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    Penny,</span><br><span class="line">    Nickel,</span><br><span class="line">    Dime,</span><br><span class="line">    <span class="title function_ invoke__">Quarter</span>(UsState),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">value_in_cents</span>(coin: Coin) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> coin &#123;</span><br><span class="line">        Coin::Penny =&gt; <span class="number">1</span>,</span><br><span class="line">        Coin::Nickel =&gt; <span class="number">5</span>,</span><br><span class="line">        Coin::Dime =&gt; <span class="number">10</span>,</span><br><span class="line">        Coin::<span class="title function_ invoke__">Quarter</span>(state) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;State quarter from &#123;:?&#125;!&quot;</span>, state);</span><br><span class="line">            <span class="number">25</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>可以使用占位符 <code>-</code>来表示其他情况</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> dice_roll &#123;</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="title function_ invoke__">add_fancy_hat</span>(),</span><br><span class="line">    <span class="number">7</span> =&gt; <span class="title function_ invoke__">remove_fancy_hat</span>(),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>针对一种情况，可以使用if letif let，代码更为简洁</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="title function_ invoke__">Some</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">match</span> v &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(<span class="number">3</span>)=&gt; <span class="built_in">println!</span>(<span class="string">&quot;3&quot;</span>),</span><br><span class="line">        _ =&gt; (),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//针对一种情况，可以使用if let</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="number">3</span>) = v &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Struct&quot;&gt;&lt;a href=&quot;#1-Struct&quot; class=&quot;headerlink&quot; title=&quot;1 Struct&quot;&gt;&lt;/a&gt;1 Struct&lt;/h2&gt;&lt;p&gt;结构体实例化的顺序可以不与定义时候一样，但是所有属性都得实例化。结构体实例声明为可变的时候其</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Rust" scheme="https://www.yangcc.top/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust学习(二)：所有权</title>
    <link href="https://www.yangcc.top/2861842578/"/>
    <id>https://www.yangcc.top/2861842578/</id>
    <published>2022-05-13T16:00:00.000Z</published>
    <updated>2022-05-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-栈和堆"><a href="#1-栈和堆" class="headerlink" title="1 栈和堆"></a>1 栈和堆</h2><blockquote><p>现代处理器在内存中跳转越少就越快</p></blockquote><p>栈内存(<code>所有存放在栈内存的数据必须有已知的固定的大小</code>)</p><ul><li>因为放入栈的数据大小都是固定的，因此入栈的时候很快，因为挨着放就行了</li></ul><p>堆内存（heap）</p><ul><li>编译时大小未知，或者程序运行时会变化的数据存放在 <code>堆</code></li><li>堆对于内存的组织性差一些，因为大小不固定，或者会改变，因此，需要分配空间，而这就需要操作系统去找到一块足够大的空间</li><li>访问数据的时候也更慢，因为有个寻址的过程</li></ul><p>函数调用</p><p>在调用函数的时候，会将函数的入参传入函数，包括入参的指针信息，然后，函数的这些参数信息会压栈，等执行完成会出栈</p><h2 id="2-所有权的规则"><a href="#2-所有权的规则" class="headerlink" title="2  所有权的规则"></a>2  所有权的规则</h2><blockquote><p>所有权存在的原因就是因为上面的堆内存，因为这块是不确定的，有的是需要回收的。</p></blockquote><p>所有权（系统）是 Rust 最为与众不同的特性，对语言的其他部分有着深刻含义。它让 Rust 无需垃圾回收（garbage collector）即可保障内存安全，因此理解 Rust 中所有权如何工作是十分重要的。本章，我们将讲到所有权以及相关功能：借用（borrowing）、slice 以及 Rust 如何在内存中布局数据</p><ul><li>每个值都有一个变量，这个变量就是该值的所有者</li><li>每个值，同时只能有一个所有者</li><li>当所有者超出作用域的时候，这个值会被删除</li></ul><p>定义一个字符串hello，其内存结构是这样的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2024-05-06_14-59-44.png"                      alt="image.png"                ></p><p>而当将携带此字符串值的变量s1赋值给s2的时候，s1在栈中就不可用,失效了，不同于浅拷贝，这种方式被称为移动（Move）</p><p>而如果需要实现深拷贝的功能的话，则需要实现 <code>clone</code>方法，类似java</p><p>而针对栈上面的数据比如基本类型：整数，布尔，浮点数，字符等是放在栈上的，不需要拷贝这些东西，因此引出了 <code>复制</code>的概念：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = x</span><br><span class="line"><span class="comment">// 到这里其实x和y都是有效的，因为是放在栈上的数据，对这些数据的复制操作是默认执行的 </span></span><br></pre></td></tr></table></figure></div><p>rust提供了 <code>Copy trait(复制 接口)</code></p><ul><li>如果一个类型实现了这个接口，那么旧的变量在值茶u年底后还是有效的，类似上面的代码</li><li>如果一个类型，或者这个类型的一部分实现了 <code>Drop trait(释放 接口)</code>，那么这个类型就不允许去实现 <code>Copy trait(复制 接口)</code>了</li></ul><p>实现了复制接口的有：</p><ul><li>整数类型，布尔，字符，浮点，Tuple(这个元组内的所有类型都是实现了复制接口)</li></ul><h3 id="2-1-所有权和函数"><a href="#2-1-所有权和函数" class="headerlink" title="2. 1 所有权和函数"></a>2. 1 所有权和函数</h3><p>将值赋给函数或者变量，在语义是其实是一样的：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fun <span class="title function_ invoke__">main</span>()&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">take1</span>(s)</span><br><span class="line"><span class="comment">// s 在这里就失效了，因为传递给方法了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">take2</span>(x)</span><br><span class="line"><span class="comment">// 在这里x依然是有效的，因为传递给方法的仅仅是副本</span></span><br><span class="line">&#125;</span><br><span class="line">fun <span class="title function_ invoke__">take1</span>(<span class="type">str</span>:<span class="type">String</span>)&#123;</span><br><span class="line"> <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,<span class="type">str</span>)</span><br><span class="line">&#125;<span class="comment">//方法执行结束，会释放str所在的堆内存</span></span><br><span class="line"></span><br><span class="line">fun <span class="title function_ invoke__">take2</span>(num:<span class="type">i32</span>)&#123;</span><br><span class="line"> <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,num)</span><br><span class="line">&#125;<span class="comment">//什么也不会发生</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>一个变量的所有权总是符合这样的模式：</p><ul><li>把一个值赋给变量的时候就会发生移动（Move）</li><li>包含这个堆数据的变量离开作用域，值就会被drap函数清理，除非数据的所有权移动到另一个变量了</li></ul><p>如何让，一个函数使用一个值，但是不拥有所有权呢？</p><ul><li>简单但麻烦的方式，就是返回一个元组，将入参原封不动的返回</li><li>使用Rust的特性 <code>引用（Reference）</code></li></ul><h3 id="2-2-引用"><a href="#2-2-引用" class="headerlink" title="2.2 引用"></a>2.2 引用</h3><p>使用 <code>&amp;</code>符号，表示使用这个值，但是不获得其所有权</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">get_lenth</span>(&amp;s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; length is &#123;&#125;&quot;</span>,s1,len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_lenth</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这段代码在内存中的形式是这样的：</p><ul><li>s表示一个指针，这个指针指向另一个指针s1,s1指向堆内存</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2024-05-06_15-01-19.png"                      alt="image.png"                ></p><p>而引用的内容，是否可以修改呢？，我们尝试在上面的方法内修改变量，会报如下的错：</p><blockquote><p>s.push_str(“, World”);<br>|     ^^^^^^^^^^^^^^^^^^^^^ <code>s</code> is a <code>&amp;</code> reference, so the data it refers to cannot be borrowed as mutable</p><p>（S是引用，所以它引用的数据不能作为可变数据来借用）</p></blockquote><p>因为引用，也是存放在栈上的，和变量一样是不可变的，而变量可以通过 <code>mut</code>来表示可变变量，那引用呢？答案是可以的：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line"><span class="comment">//首先这个变量是可变的</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="comment">//其次，这个引用也得是可变的</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">get_lenth</span>(&amp;<span class="keyword">mut</span> s1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; length is &#123;&#125;&quot;</span>,s1,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法的入参也得是可变的</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_lenth</span>(s: &amp;<span class="keyword">mut</span> <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;, World&quot;</span>);</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="1-可变引用"><a href="#1-可变引用" class="headerlink" title="1 可变引用"></a>1 可变引用</h4><p>可变引用的限制：</p><ul><li>在一个作用域内，对于某块数据，只能有一个可变引用</li></ul><p>这样做的好处有就是在编译的时候防止 <code>数据竞争</code>，以下三种情况都满足的情况会发生数据竞争</p><ul><li>多个指针同时访问一个数据</li><li>至少有一个指针用于写入数据</li><li>没有任何机制来同步对数据的访问</li></ul><p>但是我们可以通过创建作用域的方式，来允许非同时创建多个可变引用</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">m1</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m2</span> = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p> 还有一个限制：</p><blockquote><p>不可以同时拥有一个可变引用和不可变引用</p></blockquote><h4 id="2-悬空指针"><a href="#2-悬空指针" class="headerlink" title="2 悬空指针"></a>2 悬空指针</h4><p><code>悬空指针(Dangling Pointer)</code>，或者叫野指针，指向内存一个地址，但是这块内存已经被回收了，甚至已经分配给别人了，而Rust永远不会出现这个问题</p><ul><li>Rust保证了，在引用一个数据的时候，编译器会保证，在引用离开作用域之前，数据不会离开作用域</li></ul><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">dangle</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里会报错</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">dangle</span>() <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">str</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &amp;<span class="type">str</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上面的代码编译会报错，因为str在方法结束就销毁了，而str的引用却返回了，也就是出现了野指针，这样在rust编译会不通过的</p><h2 id="3-切片"><a href="#3-切片" class="headerlink" title="3 切片"></a>3 切片</h2><p>Rust的一种 <code>不持有所有权</code>的数据类型，英文slice，可以用于解决下面的问题</p><h3 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h3><p>返回第一个空格的下标，这里其实是有问题的，因为，这个index是不合字符串s绑定的，表示的只是之前算过的值，而不是当前的值，可以看到仅仅是返回一个空格下标这么多代码，还有bug</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">index</span> = <span class="title function_ invoke__">first_world</span>(&amp;s);</span><br><span class="line"></span><br><span class="line">    s.<span class="title function_ invoke__">clear</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_world</span>(<span class="type">str</span> : &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span><span class="type">usize</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bytes</span> = <span class="type">str</span>.<span class="title function_ invoke__">as_bytes</span>();</span><br><span class="line">    <span class="comment">// iter会返回一个迭代器</span></span><br><span class="line">    <span class="comment">// enumerate会将迭代器包装为一个元组，1 索引， 2 元素的引用</span></span><br><span class="line">    <span class="keyword">for</span> (i,&amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  i;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">str</span>.<span class="title function_ invoke__">len</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h3><p>左闭右开的语法：以及部分语法糖</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span>  <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h1</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">w1</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line">    <span class="comment">//语法糖</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h2</span> = &amp;s[..<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">w2</span> = &amp;s[<span class="number">6</span>..];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">all</span> = &amp;s[..];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>字符串切片在内存中的结构，指向堆内存数据的一部分</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/Snipaste_2024-05-06_15-02-10.png"                      alt="image.png"                ></p><p>改造之前的小例子，使其返回一个字符串切片,字符串切片的类型标识为：&amp;str</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span>  <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">str</span> = <span class="title function_ invoke__">first_world</span>(&amp;s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,<span class="type">str</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">first_world</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span>&amp;<span class="type">str</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">bytes</span> = s.<span class="title function_ invoke__">as_bytes</span>();</span><br><span class="line">    <span class="comment">// iter会返回一个迭代器</span></span><br><span class="line">    <span class="comment">// enumerate会将迭代器包装为一个元组，1 索引， 2 元素的引用</span></span><br><span class="line">    <span class="keyword">for</span> (i,&amp;item) <span class="keyword">in</span> bytes.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  &amp;s[..i];</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="字符串字面值"><a href="#字符串字面值" class="headerlink" title="字符串字面值"></a>字符串字面值</h3><p>字符串字面值，是什么类型的呢，没错就是切片</p><h3 id="将切片作为参数"><a href="#将切片作为参数" class="headerlink" title="将切片作为参数"></a>将切片作为参数</h3><p>之前的例子都是字符串引用作为入参：</p><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">first_world</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span>&amp;<span class="type">str</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其实，可以使用切片作为入参，这样切片可以作为入参，二字符串可以传入完整的切片，入参更为多样了。因为切片还是一种引用嘛，一样的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-栈和堆&quot;&gt;&lt;a href=&quot;#1-栈和堆&quot; class=&quot;headerlink&quot; title=&quot;1 栈和堆&quot;&gt;&lt;/a&gt;1 栈和堆&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现代处理器在内存中跳转越少就越快&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;栈内存(&lt;co</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Rust" scheme="https://www.yangcc.top/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust学习(一)：猜数字游戏</title>
    <link href="https://www.yangcc.top/2690763544/"/>
    <id>https://www.yangcc.top/2690763544/</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-Rust安装"><a href="#一-Rust安装" class="headerlink" title="一 Rust安装"></a>一 Rust安装</h2><p>Rust安装极为简单，先下载rustup</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/image-20220314220250790.png"                      alt="image-20220314220250790"                ></p><p>之后使用命令下载：</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh</span><br></pre></td></tr></table></figure></div><p>在vscode下载插件 <code>rust-analyzer</code>即可快速开发</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/image-20220314220452099.png"                      alt="image-20220314220452099"                ></p><h2 id="二-cargo"><a href="#二-cargo" class="headerlink" title="二 cargo"></a>二 cargo</h2><p>cargo就是rust的包管理工具，与npm,maven等是一样的，一般rustup来安装rust会自带cargo，常见命令如下</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个catgo项目</span></span><br><span class="line">cargo new 项目</span><br><span class="line"><span class="comment"># 编译和执行结果，可以用来检验是否编写错误</span></span><br><span class="line">cargo run </span><br><span class="line"><span class="comment"># 发布的构建，编译会优化，代码更快，但是编译时间更长</span></span><br><span class="line">cargo build --release</span><br><span class="line"><span class="comment"># 普通的构建</span></span><br><span class="line">cargo build</span><br></pre></td></tr></table></figure></div><h2 id="三-猜数字游戏"><a href="#三-猜数字游戏" class="headerlink" title="三 猜数字游戏"></a>三 猜数字游戏</h2><div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::Rng;</span><br><span class="line"><span class="keyword">use</span> std::cmp::Ordering; <span class="comment">//Ordering是一个枚举类型</span></span><br><span class="line"><span class="keyword">use</span> std::io; <span class="comment">//Rng是一个trait 可以认为是接口</span></span><br><span class="line">             <span class="comment">//rust默认会倒入prelude这个模块</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;猜一个数字&quot;</span>);</span><br><span class="line">    <span class="comment">//i32 u32 i64 都是整形</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = rand::<span class="title function_ invoke__">thread_rng</span>().<span class="title function_ invoke__">gen_range</span>(<span class="number">1</span>..<span class="number">101</span>);</span><br><span class="line">    <span class="comment">// loop表示无限循环</span></span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">guess</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="comment">// io函数读取输  使用expect方法，表示如果result是err则执行</span></span><br><span class="line">        io::<span class="title function_ invoke__">stdin</span>().<span class="title function_ invoke__">read_line</span>(&amp;<span class="keyword">mut</span> guess).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法读取行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将字符串转为整形 parse方法返回中为Result</span></span><br><span class="line">        <span class="comment">// 隐藏shadow 隐藏重名的旧变量，从18行开始，变量guess类型就变了</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">            <span class="comment">//_：此通配符表示不关心这个值</span></span><br><span class="line">            <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;你猜测的数是：&#123;&#125;&quot;</span>, guess);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//match表达式：可以让我们根据 枚举值选择不同的操作，就相当于if else</span></span><br><span class="line">        <span class="comment">//cmp就是compere，比较的意思</span></span><br><span class="line">        <span class="keyword">match</span> guess.<span class="title function_ invoke__">cmp</span>(&amp;number) &#123;</span><br><span class="line">            <span class="comment">//三个枚举分别表示小大等</span></span><br><span class="line">            Ordering::Less =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too Small!&quot;</span>),</span><br><span class="line">            Ordering::Greater =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Too Big!&quot;</span>),</span><br><span class="line">            Ordering::Equal =&gt; &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;You Win!&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>参考：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-Rust安装&quot;&gt;&lt;a href=&quot;#一-Rust安装&quot; class=&quot;headerlink&quot; title=&quot;一 Rust安装&quot;&gt;&lt;/a&gt;一 Rust安装&lt;/h2&gt;&lt;p&gt;Rust安装极为简单，先下载rustup&lt;/p&gt;
&lt;p&gt;&lt;img  
           </summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Rust" scheme="https://www.yangcc.top/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>在Manjaro上配置conky</title>
    <link href="https://www.yangcc.top/503294022/"/>
    <id>https://www.yangcc.top/503294022/</id>
    <published>2022-03-05T16:00:00.000Z</published>
    <updated>2022-03-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-下载conky"><a href="#一-下载conky" class="headerlink" title="一 下载conky"></a>一 下载conky</h2><p>使用pacman,或者yay，或者使用gnome的商店都可以下载：</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S conky</span><br><span class="line">yay -S conky</span><br></pre></td></tr></table></figure></div><p>在家目录新建一个.conkyrc的文件，写上配置文件即可，效果如下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/%E6%88%AA%E5%B1%8F-20220306110328-2560x1600.png"                      alt="截屏-20220306110328-2560x1600"                ></p><h2 id="二-设置开机自启"><a href="#二-设置开机自启" class="headerlink" title="二 设置开机自启"></a>二 设置开机自启</h2><p>比如在gnome中工具中设置开机自启，是没有效果的，因为conky需要在系统启动桌面加载好后才启动，因此需要一个延时，因此，在目录 <code>~/.config/autostart/</code>目录中可以看到很多的开机自启的 <code>desktop</code>文件，因此只需要新建一个 <code>sh</code>设置休眠后启动即可：</p><ol><li>在家目录新建一个 <code>conky.sh</code></li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">sleep</span> 5 &amp;&amp; conky</span><br></pre></td></tr></table></figure></div><ol start="2"><li>在 <code>~/.config/autostart/</code>新建一个 <code>dekstop</code>文件</li></ol><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=conky</span><br><span class="line">Exec=/home/$&#123;你的用户名&#125;/conky.sh</span><br></pre></td></tr></table></figure></div><p>这样conky就能正常的启动了</p><h2 id="三-相关文件："><a href="#三-相关文件：" class="headerlink" title="三 相关文件："></a>三 相关文件：</h2><p>配置文件：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">alignment top_right</span><br><span class="line">background no</span><br><span class="line">border_width 0</span><br><span class="line">cpu_avg_samples 16</span><br><span class="line">default_color green</span><br><span class="line">default_outline_color white</span><br><span class="line">default_shade_color 000000</span><br><span class="line">draw_borders no</span><br><span class="line">draw_graph_borders yes</span><br><span class="line">draw_outline no</span><br><span class="line">draw_shades no</span><br><span class="line">use_xft yes</span><br><span class="line">font Noto Sans Regular:size=8</span><br><span class="line">xftfont Noto Sans Regular:size=8</span><br><span class="line">override_utf8_locale yes</span><br><span class="line">minimum_size 280 5</span><br><span class="line">maximum_width 350</span><br><span class="line">net_avg_samples 2</span><br><span class="line">no_buffers yes</span><br><span class="line">out_to_console no</span><br><span class="line">out_to_stderr no</span><br><span class="line">extra_newline no</span><br><span class="line">own_window yes</span><br><span class="line">own_window_class Conky</span><br><span class="line">own_window_type desktop</span><br><span class="line">own_window_hints undecorated,below,sticky,skip_taskbar,skip_pager</span><br><span class="line">double_buffer yes</span><br><span class="line">own_window_colour 000000</span><br><span class="line">own_window_argb_visual yes</span><br><span class="line">own_window_argb_value 0</span><br><span class="line">stippled_borders 0</span><br><span class="line">update_interval 1.0</span><br><span class="line">uppercase no</span><br><span class="line">use_spacer none</span><br><span class="line">show_graph_scale no</span><br><span class="line">show_graph_range no</span><br><span class="line">gap_x 10</span><br><span class="line">gap_y 50</span><br><span class="line">default_color ffffff</span><br><span class="line">default_shade_color 000000</span><br><span class="line">default_outline_color 000000</span><br><span class="line"></span><br><span class="line">TEXT</span><br><span class="line">$&#123;voffset 3&#125;$&#123;color EAEAEA&#125;$&#123;font Noto Sans Regular:pixelsize=100&#125;$&#123;time %H:%M&#125;$&#123;voffset -26&#125;$&#123;color EAEAEA&#125;$&#123;font Noto Sans Regular:pixelsize=40&#125; $&#123;color #7fef94&#125;$&#123;time %B&#125; $&#123;font&#125;$&#123;voffset -3&#125;$&#123;offset 2&#125;$&#123;color #fdc92d&#125;$&#123;font Noto Sans Regular:pixelsize=30&#125;$&#123;time %d号&#125; $&#123;font&#125;$&#123;voffset 25&#125;$&#123;font Noto Sans Regular:pixelsize=30&#125;$&#123;offset -55&#125;$&#123;time %A&#125;</span><br><span class="line">$&#123;color&#125;$&#123;hr 1&#125;</span><br><span class="line">$&#123;font Noto Sans Regular:pixelsize=25&#125;$&#123;color #fdc92d&#125;主机名称：$&#123;alignr&#125;$&#123;color &#125; Linux $kernel</span><br><span class="line">$&#123;color #fdc92d&#125;主机名称：$&#123;alignr&#125;$&#123;color &#125; $nodename</span><br><span class="line">$&#123;color #fdc92d&#125;内核版本：$&#123;alignr&#125;$&#123;color &#125;$kernel</span><br><span class="line">$&#123;color #fdc92d&#125;运行时间：$&#123;alignr&#125;$&#123;color &#125;$uptime</span><br><span class="line"></span><br><span class="line">####系统####</span><br><span class="line">$&#123;color lightblue&#125;$&#123;font :bold:size=12&#125;$&#123;color lightblue&#125;系统$&#123;alignr 180&#125;$&#123;color&#125;$&#123;hr 1&#125;</span><br><span class="line">$&#123;font Noto Sans Regular:pixelsize=25&#125;$&#123;color #fdc92d&#125;CPU:$&#123;alignr&#125; $color$&#123;cpu&#125;% $&#123;color #78af78&#125;$&#123;cpubar 10,60&#125;</span><br><span class="line">$&#123;color #fdc92d&#125;内存: $color$mem / $memmax $&#123;color&#125;$&#123;alignr&#125;$memperc% $&#123;color #78af78&#125;$&#123;membar 10,60&#125;</span><br><span class="line">$&#123;color #fdc92d&#125;根分区: $&#123;color&#125;$&#123;fs_free /&#125; / $&#123;fs_size /&#125;$&#123;alignr&#125;$&#123;color #78af78&#125;$&#123;fs_bar 10,60 /&#125;</span><br><span class="line">$&#123;color #fdc92d&#125;用户分区: $color$&#123;fs_free /home&#125; / $&#123;fs_size /home&#125; $&#123;color #78af78&#125;$&#123;alignr&#125;$&#123;fs_bar 10,60 /home&#125;</span><br><span class="line"></span><br><span class="line">####网络####</span><br><span class="line">$&#123;color lightblue&#125;$&#123;font :bold:size=12&#125;$&#123;color lightblue&#125;网络$&#123;alignr 180&#125;$&#123;color&#125;$&#123;hr 1&#125;</span><br><span class="line">$&#123;font Noto Sans Regular:pixelsize=25&#125;$&#123;color #fdc92d&#125;无线WIFI：$&#123;alignr&#125;$&#123;color&#125;$&#123;font :pixelsize=25&#125; IP：$&#123;addr wlp1s0&#125;</span><br><span class="line">$&#123;color #7fef94&#125;$&#123;font Noto Sans Regular:pixelsize=25&#125;下载： $&#123;downspeed wlp1s0&#125; KiB/s $&#123;alignr&#125;上传： $&#123;upspeedf wlp1s0&#125; KiB/s</span><br><span class="line">$&#123;color #C9C9C9&#125;$&#123;downspeedgraph wlp1s0 20,100&#125; $&#123;alignr&#125;$&#123;upspeedgraph wlp1s0 20,100&#125;</span><br><span class="line">$color总计： $&#123;totaldown wlp1s0&#125; $&#123;alignr&#125;总计： $&#123;totalup wlp1s0&#125;</span><br><span class="line"></span><br><span class="line">$&#123;font Noto Sans Regular:pixelsize=25&#125;$&#123;color #fdc92d&#125;本地连接：$&#123;alignr&#125; $&#123;color&#125;$&#123;font :pixelsize=25&#125; IP：$&#123;addr enp2s0&#125;</span><br><span class="line">$&#123;color #7fef94&#125;$&#123;font Noto Sans Regular:pixelsize=25&#125;下载： $&#123;downspeedf enp2s0&#125; KiB/s $&#123;alignr&#125; 上传： $&#123;upspeedf enp2s0&#125; KiB/s</span><br><span class="line">$&#123;color #C9C9C9&#125;$&#123;downspeedgraph enp2s0 20,100&#125; $&#123;alignr&#125;$&#123;upspeedgraph enp2s0 20,100&#125;</span><br><span class="line">$color总计： $&#123;totaldown enp2s0&#125; $&#123;alignr&#125;总计： $&#123;totalup enp2s0&#125;</span><br><span class="line"></span><br><span class="line">#随便写点啥＃</span><br><span class="line">$alignc $&#123;color #056107&#125;$&#123;font :bold:size=5&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-下载conky&quot;&gt;&lt;a href=&quot;#一-下载conky&quot; class=&quot;headerlink&quot; title=&quot;一 下载conky&quot;&gt;&lt;/a&gt;一 下载conky&lt;/h2&gt;&lt;p&gt;使用pacman,或者yay，或者使用gnome的商店都可以下载：&lt;/p&gt;
&lt;div</summary>
      
    
    
    
    <category term="工具" scheme="https://www.yangcc.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="https://www.yangcc.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Manjaro上安装mysql</title>
    <link href="https://www.yangcc.top/2520100274/"/>
    <id>https://www.yangcc.top/2520100274/</id>
    <published>2022-03-04T16:00:00.000Z</published>
    <updated>2022-03-04T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-下载mysql"><a href="#一-下载mysql" class="headerlink" title="一 下载mysql"></a>一 下载mysql</h2><p>无论是使用自带商店，还是pacman,yay都是可以的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-yangcc.oss-cn-beijing.aliyuncs.com/blog/image-20220312145320693.png"                      alt="image-20220312145320693"                ></p><h2 id="二-配置"><a href="#二-配置" class="headerlink" title="二 配置"></a>二 配置</h2><ol><li>打开终端初始化mysql：复制日志中打印的随机密码</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br></pre></td></tr></table></figure></div><ol start="2"><li>然后启动mysql</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.首先启动MySQL</span><br><span class="line">sudo systemctl start mysqld</span><br><span class="line">2.登录</span><br><span class="line">mysql -u root -p</span><br><span class="line">3.修改密码</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH caching_sha2_password BY <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">4. 开机自启</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure></div><ol start="3"><li>添加环境变量</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.编辑profile文件，配置环境变量</span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">2.立即生效</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></div><ol start="4"><li>重启服务</li></ol><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart mysqld</span><br><span class="line">mysql -u root -p </span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-下载mysql&quot;&gt;&lt;a href=&quot;#一-下载mysql&quot; class=&quot;headerlink&quot; title=&quot;一 下载mysql&quot;&gt;&lt;/a&gt;一 下载mysql&lt;/h2&gt;&lt;p&gt;无论是使用自带商店，还是pacman,yay都是可以的&lt;/p&gt;
&lt;p&gt;&lt;img  
</summary>
      
    
    
    
    <category term="工具" scheme="https://www.yangcc.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Linux" scheme="https://www.yangcc.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>控制缩放以及多倍图</title>
    <link href="https://www.yangcc.top/1839521991/"/>
    <id>https://www.yangcc.top/1839521991/</id>
    <published>2022-02-07T16:00:00.000Z</published>
    <updated>2022-02-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-系统缩放"><a href="#一-系统缩放" class="headerlink" title="一 系统缩放"></a>一 系统缩放</h2><p>Javafx针对系统缩放是有优化的，比如在我的小新pro13上默认缩放比例为200%，因此在默认情况下如下的代码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">primaryStage.setWidth(<span class="number">500</span>);</span><br><span class="line">primaryStage.setHeight(<span class="number">500</span>);</span><br></pre></td></tr></table></figure></div><p>展示的宽高是1000x1000,而我们是否可以自己来进行控制呢？也就是很多桌面程序常见的功能：<code>是否禁止屏幕DPI适配</code></p><p>在Javafx中为我们提供了两个虚拟机参数：</p><div class="highlight-container" data-rel="Sh"><figure class="iseeu highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  禁止屏幕缩放</span></span><br><span class="line">-Dprism.allowhidpi = <span class="literal">false</span></span><br><span class="line"><span class="comment"># 默认起始缩放比例</span></span><br><span class="line">：-Dglass.win.minHiDPI = 1</span><br></pre></td></tr></table></figure></div><p>因此只需要在虚拟机启动的时候加上这个参数即可，而Java为我们提供了两种方式，分别是键值对，以及传入一个Properties对象，因此就可以将参数写入Properties文件中，就可以保存用户的设置。</p><h2 id="二-多倍图"><a href="#二-多倍图" class="headerlink" title="二 多倍图"></a>二 多倍图</h2><p>多倍图还是对系统缩放的优化，因为如果图片是固定大小的，如果高分屏缩放很可能是150%，200%，那这样图片就会出现模糊的效果，因此Javafx对此进行了优化只要图片名称后加入 <code>@2x</code>或者 <code>@3x</code>,注意只能是整数倍，就可以实现自动切换,比如下面的代码，加载的其实是 <code>java@2x.png</code>这张图片。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">primaryStage.getIcons().add(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Image</span>(getClass().getResource(<span class="string">&quot;/img/java.png&quot;</span>).toExternalForm())</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p>注意加载图片的方式要使用非流的方式，因为如果是流就固定的使用那张图片了。</p><h3 id="三-参考"><a href="#三-参考" class="headerlink" title="三 参考"></a>三 参考</h3><p>感谢B站LeeWyatt的讲解，这是视频地址 <a class="link"   href="https://www.bilibili.com/video/BV113411k7Zr" >https://www.bilibili.com/video/BV113411k7Zr <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-系统缩放&quot;&gt;&lt;a href=&quot;#一-系统缩放&quot; class=&quot;headerlink&quot; title=&quot;一 系统缩放&quot;&gt;&lt;/a&gt;一 系统缩放&lt;/h2&gt;&lt;p&gt;Javafx针对系统缩放是有优化的，比如在我的小新pro13上默认缩放比例为200%，因此在默认情况下如下的</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Javafx" scheme="https://www.yangcc.top/tags/Javafx/"/>
    
  </entry>
  
  <entry>
    <title>类型擦除</title>
    <link href="https://www.yangcc.top/2260828129/"/>
    <id>https://www.yangcc.top/2260828129/</id>
    <published>2021-10-01T16:00:00.000Z</published>
    <updated>2021-10-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-泛型"><a href="#一-泛型" class="headerlink" title="一 泛型"></a>一 泛型</h2><blockquote><p>在JAVA中的泛型，在编译的时候，所有的泛型信息都会被抹去。这个过程成为 <code>类型擦除</code>。这样做的原因是为了兼容老版本。</p><p>JAVA中泛型的引入主要是为了解决两个方面的问题：</p><ul><li>减少类型转换</li><li>解决的时重复代码的编写，能够复用算法，泛化。</li></ul></blockquote><p>以类Dad为例，有一成员是泛型，并且有对应的get，set方法。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dad</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>而在反编译后，代码如下，可以看到类型T全部被Object替换。如果定义的类泛型指定为 <code>&lt;T extend Comparable&gt;</code>，则编译后所有的T替换为Comparable</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dad</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object value)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="二-类型擦除产生的特性"><a href="#二-类型擦除产生的特性" class="headerlink" title="二 类型擦除产生的特性"></a>二 类型擦除产生的特性</h2><p><code>1 编译检查根据引用确定</code>:</p><p>既然编译后类型变为Object，因此赋值的时候传递不同类型的值是否可以呢？答案是不可以，因为编译器在编译前会先检查代码中泛型的类型，不符合条件编译不通过。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正确方式</span></span><br><span class="line">List&lt;String&gt; list  = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">list.add(<span class="number">1</span>);<span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure></div><p>而如下这种方式虽然可以通过编译但是会有编译警告，但我们这么用就没意义了，因为存储的类型实际上是Object，如果要强行转换为String是会出现 <code>类型转换异常</code>的。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>); <span class="comment">//编译警告，未检查的参数</span></span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">    System.out.println((String) o); <span class="comment">//到第二个参数的时候抛出 类型转换异常</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>从上面的例子可以看出，编译器在检查泛型是否合格的时候确实是根据 <code>引用</code>检查的</p></blockquote><p><code>2 不允许引用传递时改变类型</code>：</p><p>既然前面我们知道了编译器检查泛型是否合格是根据 <code>引用</code>来决定是否通过的，那么我们引用传递下换成不同的类型是否是可以的呢? 答案是不可以的，泛型的出现就是为了尽量减少类型转换，这样写代码也就失去了意义。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;String&gt; list2 = list1; <span class="comment">//编译报错</span></span><br></pre></td></tr></table></figure></div><p><code>3 集合会自动类型转换</code></p><p>因为在编译的时候都变为了Object，而我们获取后为何还是我们制定的类型呢？以ArrayList为例，在获取元素前已经做了类型转换，我们不再需要进行类型转换了。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index]; <span class="comment">//转换为指定的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>4 桥方法解决与多态的冲突</code></p><p>有一个泛型父类如下：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dad</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>有子类继承它，并且指定泛型类型，我们会发现这样写 <code>@Override</code>注解是通过的，也就是满足重写。但是父类编译后是Object，而我们子类的两个方法是String类型，因为方法重写的规则是 <code>方法的参数</code>是必须是相同类型的，因此这里的set方法其实并不满足重写规则的，</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Dad</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Sub</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>将子类反编译后会发现，多出来两个对应的方法。可以看到这两个方法调用了我们重写的方法，实际上这两个方法才满足 <code>@Override</code>，这就是 <code>桥方法</code>，编译后通过这个方法解决了泛型类重写的问题。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sub</span> <span class="keyword">extends</span> <span class="title class_">Dad</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> <span class="comment">//重写的get方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> Object <span class="title function_">getValue</span><span class="params">()</span> <span class="comment">//生成的桥方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> getValue(); <span class="comment">//调用重写的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> <span class="comment">//重写的set方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;设置value&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object obj)</span> <span class="comment">//生产的桥方法</span></span><br><span class="line">    &#123;</span><br><span class="line">        setValue((String)obj); <span class="comment">//调用重写的set方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>5 泛型类型变量不能是基本数据类型</code></p><p>因为类型擦除后所有的泛型关键字都是要替换成Object或者其子类，反正一定要是引用类型。如果要使用基本类型存储数据可以使用相应的包装类。</p><p><code>6 集合的instanceof编译不通过</code></p><p>因为编译后类型被擦除，无论是 <code>List&lt;String&gt;</code>还是 <code>List&lt;Integer&gt;</code>都变成了 <code>List</code>,因此下面的语句在编译时候是不通过的：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">if</span>( arrayList <span class="keyword">instanceof</span> ArrayList&lt;String&gt;) <span class="comment">//编译不通过</span></span><br></pre></td></tr></table></figure></div><p><code>7 静态成员或者方法无法声明为泛型</code></p><p>因为泛型类型是创建对象的时候才确定是什么类型的，而静态属性或者方法不需要使用对象调用，无法确定泛型是什么类型的。</p><p>而下面这种情况例外：因为方法show的返回值类型是由方法参数决定的，返回值类型就是参数类型。</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&lt;T&gt; &#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">show</span><span class="params">(T t)</span>&#123; <span class="comment">//编译正确 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="三-如何保存泛型信息"><a href="#三-如何保存泛型信息" class="headerlink" title="三 如何保存泛型信息"></a>三 如何保存泛型信息</h2><p> 既然泛型信息擦除了，那么反射应该是获取不到类型信息的吧，但是还是能获取到</p><p>有一个泛型父类，在构造方法中通过反射获取类型信息</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EntityHandler</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EntityHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="comment">//获取类型</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">genericSuperclass</span> <span class="operator">=</span> clazz.getGenericSuperclass();</span><br><span class="line">        System.out.println(genericSuperclass); <span class="comment">//EntityHandler&lt;User&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取泛型信息</span></span><br><span class="line">        <span class="type">ParameterizedType</span> <span class="variable">t</span> <span class="operator">=</span> (ParameterizedType)clazz.getGenericSuperclass();</span><br><span class="line">        Type[] ts = t.getActualTypeArguments();</span><br><span class="line">        <span class="keyword">for</span> (Type type : ts) &#123;</span><br><span class="line">            System.out.println(type); <span class="comment">//class User</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>子类赋值为了User类型</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHandler</span> <span class="keyword">extends</span> <span class="title class_">EntityHandler</span>&lt;User&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">UserHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>控制台打印：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test.base.generic.EntityHandler&lt;test.base.generic.User&gt;</span><br><span class="line">class test.base.generic.User</span><br></pre></td></tr></table></figure></div><p>答案就是在编译为字节码文件的时候，泛型信息通过 <code>Signature</code>保存了下来</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> test.base.generic.UserHandler();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: (<span class="number">0x0001</span>) ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method EntityHandler.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">7</span>: <span class="number">0</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">5</span>     <span class="number">0</span>  <span class="built_in">this</span>   Ltest/base/generic/UserHandler;</span><br><span class="line">&#125;</span><br><span class="line">Signature: #<span class="number">12</span>                          <span class="comment">// /EntityHandler&lt;Ltest/User;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; l1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">List&lt;Integer&gt; l2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">System.out.println(l1.getClass() == l2.getClass());</span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-泛型&quot;&gt;&lt;a href=&quot;#一-泛型&quot; class=&quot;headerlink&quot; title=&quot;一 泛型&quot;&gt;&lt;/a&gt;一 泛型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在JAVA中的泛型，在编译的时候，所有的泛型信息都会被抹去。这个过程成为 &lt;code&gt;类型擦除&lt;/</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://www.yangcc.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="https://www.yangcc.top/3542956005/"/>
    <id>https://www.yangcc.top/3542956005/</id>
    <published>2021-09-30T16:00:00.000Z</published>
    <updated>2021-09-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><h3 id="一、现存问题"><a href="#一、现存问题" class="headerlink" title="一、现存问题"></a>一、现存问题</h3><h4 id="1-1-现存问题"><a href="#1-1-现存问题" class="headerlink" title="1.1 现存问题"></a>1.1 现存问题</h4><ul><li>海量数据存储</li><li>海量数据中完成全文检索</li><li>如何实现关键字的高亮显示</li><li>海量数据中完成统计操作</li></ul><h4 id="1-2-ES的介绍（搜索引擎）"><a href="#1-2-ES的介绍（搜索引擎）" class="headerlink" title="1.2 ES的介绍（搜索引擎）"></a>1.2 ES的介绍（搜索引擎）</h4><blockquote><p>Elasticsearch天生分布式，支持海量数据的存储，什么在大数据领域也有应用。</p><p>Elasticsearch采用倒排索引的方式去全文检索数据，亿级数据中检索时间在毫秒级别。</p><p>Elasticsearch提供了highlight高亮查询方式</p><p>Elasticsearch提供了及其丰富和聚合函数</p><p>Elasticsearch基于Java实现，搜索功能是基于先进最流行的Lucene实现……</p><p>Elasticsearch本身是一套技术栈，<a href="">ELK</a>中的一个组件，ELK是收集日志的一套技术栈……</p><p>中文官方地址：<a class="link"   href="https://www.elastic.co/cn/elasticsearch/" >https://www.elastic.co/cn/elasticsearch/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p></blockquote><h3 id="二、安装ES-amp-Kibana-amp-IK分词器"><a href="#二、安装ES-amp-Kibana-amp-IK分词器" class="headerlink" title="二、安装ES&amp;Kibana&amp;IK分词器"></a>二、安装ES&amp;Kibana&amp;IK分词器</h3><blockquote><p>采用docker运行Elasticsearch容器和Kibana容器</p></blockquote><h4 id="2-1-安装ES-amp-Kibana"><a href="#2-1-安装ES-amp-Kibana" class="headerlink" title="2.1 安装ES&amp;Kibana"></a>2.1 安装ES&amp;Kibana</h4><p>docker-compose.yml</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.1&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">10.9</span><span class="number">.12</span><span class="number">.200</span><span class="string">:60001/elasticsearch:7.8.0</span></span><br><span class="line">    <span class="comment"># restart: always     # 只要docker启动，当前容器自动启动</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms256m -Xmx256m&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml</span></span><br><span class="line">      <span class="comment"># 数据卷如果映射文件，需要提前在宿主机中创建好这个文件</span></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="number">10.9</span><span class="number">.12</span><span class="number">.200</span><span class="string">:60001/kibana:7.8.0</span></span><br><span class="line">    <span class="comment"># restart: always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch_url=http://192.168.41.98:9200</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/kibana.yml:/usr/share/kibana/config/kibana.yml</span></span><br></pre></td></tr></table></figure></div><p>数据卷映射文件的内容</p><p>elasticsearch.yml</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">&quot;docker-cluster&quot;</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></div><p>kibana.yml</p><div class="highlight-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>准备好上述内容后，<a href="">docker-compose up -d</a></p><p>检测启动是否成功：</p><h4 id="2-2-安装IK分词器"><a href="#2-2-安装IK分词器" class="headerlink" title="2.2 安装IK分词器"></a>2.2 安装IK分词器</h4><p>在kibana中基于RESTful的形式和ES交互</p><p>需要在kibana上发送HTTP请求并携带JSON参数与ES交互</p><p>在kibana的dev tools上测试分词器</p><p>安装IK分词器</p><p>下载地址：<a class="link"   href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.8.0/elasticsearch-analysis-ik-7.8.0.zip" >https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.8.0/elasticsearch-analysis-ik-7.8.0.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>需要将zip压缩包解压的内容放到elasticsearch容器内部的 <code>/usr/share/elasticsearch/plugins/ik_analyzer/</code></p><p>修改docker-compose.yml文件，给elasticsearch添加了一个数据卷，映射到 <code>/usr/local/docker/es_docker/plugins</code></p><p>将zip压缩包扔到Linux中，并且放到数据库内的ik_analyzer目录里，通过unzip解压，重启elasticsearch容器</p><p>再次通过IK分词器进行分词</p><h3 id="三、ES的存储结构"><a href="#三、ES的存储结构" class="headerlink" title="三、ES的存储结构"></a>三、ES的存储结构</h3><blockquote><p>在ES服务中创建索引，并指定索引的主分片个数，以及备份分片个数。</p><p>给索引设置存储数据的结构</p><p>上述搞定后，可以向索引中添加文件……</p></blockquote><h3 id="四、索引操作"><a href="#四、索引操作" class="headerlink" title="四、索引操作"></a>四、索引操作</h3><h4 id="4-1-创建索引（不指定存储结构）"><a href="#4-1-创建索引（不指定存储结构）" class="headerlink" title="4.1 创建索引（不指定存储结构）"></a>4.1 创建索引（不指定存储结构）</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引</span><br><span class="line">PUT /book</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="4-2-Elasticsearch数据类型"><a href="#4-2-Elasticsearch数据类型" class="headerlink" title="4.2 Elasticsearch数据类型"></a>4.2 Elasticsearch数据类型</h4><ul><li><p>字符串类型：</p><ul><li>text：文本类型，一般用于搜索……</li><li>keyword：关键字，当前值不允许分词……</li></ul></li><li><p>boolean类型：</p><ul><li>boolean：没啥说的…………</li></ul></li><li><p>二进制类型：</p><ul><li>binary：只支持encoding为Base64格式……</li></ul></li><li><p>数值类型：</p><table><thead><tr><th><code>long</code></th><th>A signed 64-bit integer with a minimum value of <code>-263</code> and a maximum value of <code>263-1</code>.</th></tr></thead><tbody><tr><td><code>integer</code></td><td>A signed 32-bit integer with a minimum value of <code>-231</code> and a maximum value of <code>231-1</code>.</td></tr><tr><td><code>short</code></td><td>A signed 16-bit integer with a minimum value of <code>-32,768</code> and a maximum value of <code>32,767</code>.</td></tr><tr><td><code>byte</code></td><td>A signed 8-bit integer with a minimum value of <code>-128</code> and a maximum value of <code>127</code>.</td></tr><tr><td><code>double</code></td><td>A double-precision 64-bit IEEE 754 floating point number, restricted to finite values.</td></tr><tr><td><code>float</code></td><td>A single-precision 32-bit IEEE 754 floating point number, restricted to finite values.</td></tr><tr><td><code>half_float</code></td><td>A half-precision 16-bit IEEE 754 floating point number, restricted to finite values.</td></tr><tr><td><code>scaled_float</code></td><td>A floating point number that is backed by a <code>long</code>, scaled by a fixed <code>double</code> scaling factor.</td></tr><tr><td><code>unsigned_long</code></td><td>An unsigned 64-bit integer with a minimum value of 0 and a maximum value of <code>264-1</code>.</td></tr></tbody></table></li><li><p>时间类型：</p><ul><li><p>date：代表时间类型，根据format设置格式化方式</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd || yyyy-MM-dd HH:mm:ss || strict_date_optional_time || epoch_millis&quot;</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>ip类型：</p><ul><li>ip：支持ipv4和ipv6类型</li></ul></li><li><p>geo类型：</p><ul><li>geo_point：支持经纬度存储……</li></ul></li></ul><h4 id="4-3-创建索引（结构化存储）"><a href="#4-3-创建索引（结构化存储）" class="headerlink" title="4.3 创建索引（结构化存储）"></a>4.3 创建索引（结构化存储）</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引并设置存储结构</span><br><span class="line">PUT /novel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span>    # 这样会使用默认的standard分词器，使用IK需要额外添加信息</span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span>   # 添加这个才会使用IK分词器  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;onsale&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd || yyyy-MM-dd HH:mm:ss || strict_date_optional_time || epoch_millis&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>创建成功，查看效果</p><p>索引构建成功后</p><ul><li><p>主分片个数不允许修改……</p></li><li><p>备份分片个数可以随意修改……</p></li><li><p>索引中的属性类型是不允许修改的，但是可以追加属性……</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;datatype&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></li></ul><h4 id="4-4-查看索引"><a href="#4-4-查看索引" class="headerlink" title="4.4 查看索引"></a>4.4 查看索引</h4><blockquote><p>可以通过图形化界面查看</p></blockquote><p>REST查看</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引</span><br></pre></td></tr></table></figure></div><h4 id="4-5-删除索引"><a href="#4-5-删除索引" class="headerlink" title="4.5 删除索引"></a>4.5 删除索引</h4><blockquote><p>可以通过图形化界面删除</p></blockquote><p>REST删除</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /索引</span><br></pre></td></tr></table></figure></div><h3 id="五、文档操作"><a href="#五、文档操作" class="headerlink" title="五、文档操作"></a>五、文档操作</h3><h4 id="5-1-添加文档"><a href="#5-1-添加文档" class="headerlink" title="5.1 添加文档"></a>5.1 添加文档</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 添加文档，指定id添加，自动生成id</span><br><span class="line">POST /novel/_doc/    # 自动生成id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;斗破苍穹&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;天残土豆&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">99999</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;onsale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2000-01-01&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST /novel/_create/<span class="number">1</span>     # 手动设置id</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;斗罗大陆&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;唐家三少&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">999999</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;onsale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2010-01-01&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="5-2-修改文档"><a href="#5-2-修改文档" class="headerlink" title="5.2 修改文档"></a>5.2 修改文档</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改文档</span><br><span class="line">POST /novel/_update/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;倒斗大陆&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="5-3-删除文档"><a href="#5-3-删除文档" class="headerlink" title="5.3 删除文档"></a>5.3 删除文档</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除文档</span><br><span class="line">DELETE /novel/_doc/sXVVyHsB4k1tdHs36v4c</span><br></pre></td></tr></table></figure></div><h4 id="5-4-根据id查询文档"><a href="#5-4-根据id查询文档" class="headerlink" title="5.4 根据id查询文档"></a>5.4 根据id查询文档</h4><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 根据_id查询文档</span><br><span class="line">GET /novel/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure></div><h3 id="六、Java操作ES"><a href="#六、Java操作ES" class="headerlink" title="六、Java操作ES"></a>六、Java操作ES</h3><blockquote><p>Elasticsearch官方推出了两种Java操作的客户端，采用<a href="">Rest-High-Level-Client</a>。</p><p>还有另一种与Elasticsearch交互客户端，可以写类似SQL的语句，与Elasticsearch交互。</p><p>还有另一种与Elasticsearch交互客户端，SpringBoot整合的data-elasticsearch。</p></blockquote><h4 id="6-1-Java连接Elasticsearch服务"><a href="#6-1-Java连接Elasticsearch服务" class="headerlink" title="6.1 Java连接Elasticsearch服务"></a>6.1 Java连接Elasticsearch服务</h4><h5 id="6-1-1-导入依赖"><a href="#6-1-1-导入依赖" class="headerlink" title="6.1.1 导入依赖"></a>6.1.1 导入依赖</h5><div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h5 id="6-1-2-编写配置类"><a href="#6-1-2-编写配置类" class="headerlink" title="6.1.2 编写配置类"></a>6.1.2 编写配置类</h5><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ESClientUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取与ES交互的client对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RestHighLevelClient <span class="title function_">getClient</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpHost</span> <span class="variable">httpHost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.41.98&quot;</span>,<span class="number">9200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">restClientBuilder</span> <span class="operator">=</span> RestClient.builder(httpHost);</span><br><span class="line"></span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">restHighLevelClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(restClientBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> restHighLevelClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="6-2-添加文档"><a href="#6-2-添加文档" class="headerlink" title="6.2 添加文档"></a>6.2 添加文档</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CREATED</span> <span class="operator">=</span> <span class="string">&quot;created&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 创建指定的request对象</span></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 设置索引信息，文档id</span></span><br><span class="line">    indexRequest.index(<span class="string">&quot;novel&quot;</span>);</span><br><span class="line">    indexRequest.id(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 准备具体文档数据</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">    source.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;明朝&quot;</span>);</span><br><span class="line">    source.put(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;朱元璋&quot;</span>);</span><br><span class="line">    source.put(<span class="string">&quot;count&quot;</span>,<span class="number">88888</span>);</span><br><span class="line">    <span class="comment">// 时间推荐使用年月日时分秒格式，虽然kibana显示有问题，但是查询结果没问题</span></span><br><span class="line">    source.put(<span class="string">&quot;onsale&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    indexRequest.source(source);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 将request用RestHighLevelClient发送出去，接收ES服务的响应</span></span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">resp</span> <span class="operator">=</span> ESClientUtil.getClient().index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 基于响应结果，判断添加是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (CREATED.equals(resp.getResult().getLowercase())) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文档添加成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="6-3-修改文档"><a href="#6-3-修改文档" class="headerlink" title="6.3 修改文档"></a>6.3 修改文档</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 创建指定的request对象</span></span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 设置索引信息，文档id</span></span><br><span class="line">    request.index(<span class="string">&quot;novel&quot;</span>);</span><br><span class="line">    request.id(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 准备具体文档数据</span></span><br><span class="line">    Map&lt;String, Object&gt; source = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">    source.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;明朝那么多事！&quot;</span>);</span><br><span class="line">    request.doc(source);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 将request用RestHighLevelClient发送出去，接收ES服务的响应</span></span><br><span class="line">    <span class="type">UpdateResponse</span> <span class="variable">resp</span> <span class="operator">=</span> ESClientUtil.getClient().update(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 基于响应结果，判断操作是否成功</span></span><br><span class="line">    <span class="keyword">if</span> (UPDATED.equals(resp.getResult().getLowercase())) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文档修改成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="6-5-批量操作"><a href="#6-5-批量操作" class="headerlink" title="6.5 批量操作"></a>6.5 批量操作</h4><h4 id="6-6-根据id查询文档"><a href="#6-6-根据id查询文档" class="headerlink" title="6.6 根据id查询文档"></a>6.6 根据id查询文档</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 创建指定的request对象</span></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 设置索引信息，文档id</span></span><br><span class="line">    request.index(<span class="string">&quot;novel&quot;</span>);</span><br><span class="line">    request.id(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 将request用RestHighLevelClient发送出去，接收ES服务的响应</span></span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">resp</span> <span class="operator">=</span> ESClientUtil.getClient().get(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 基于响应结果，判断操作是否成功</span></span><br><span class="line">    System.out.println(resp.getSourceAsMap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="七、ES的基本查询"><a href="#七、ES的基本查询" class="headerlink" title="七、ES的基本查询"></a>七、ES的基本查询</h3><h4 id="7-1-倒排-x2F-反向索引"><a href="#7-1-倒排-x2F-反向索引" class="headerlink" title="7.1 倒排&#x2F;反向索引"></a>7.1 倒排&#x2F;反向索引</h4><h4 id="7-2-term查询"><a href="#7-2-term查询" class="headerlink" title="7.2 term查询"></a>7.2 term查询</h4><blockquote><p>term是ES最基本的查询，基本上所有的检索方式的底层都是term查询……</p></blockquote><h5 id="7-2-1-term查询"><a href="#7-2-1-term查询" class="headerlink" title="7.2.1 term查询"></a>7.2.1 term查询</h5><blockquote><p>term查询对比MySQL的话，相当于：where column &#x3D; ？</p><p>term就是将用户输入的关键字与ES中的某一个属性做等值比较（当前属性的分词库）。</p><p>term不会将用户输入的关键字进行分词，直接拿用户的完整关键字匹配分词库。</p><p>term更适合查询keyword类型的属性</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># term查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;滴滴单车平台&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h5 id="7-2-2-terms查询"><a href="#7-2-2-terms查询" class="headerlink" title="7.2.2 terms查询"></a>7.2.2 terms查询</h5><blockquote><p>term查询对比MySQL的话，相当于：where column in (?,?,?)</p><p>和terms一致，让用户输入多个关键字去匹配一个属性</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">[</span>terms查询<span class="punctuation">]</span><span class="punctuation">]</span></span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;滴滴打车&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;平台&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="7-3-match查询"><a href="#7-3-match查询" class="headerlink" title="7.3 match查询"></a>7.3 match查询</h4><blockquote><p>match查询是使用频率最高的查询方式，match查询的底层还是term查询</p><p>match查询会根据查询的field的属性，决定是否将用户输入的关键字进行分词</p><ul><li>如果field是keyword类型，match查询不会将用户输入的关键字进行分词</li><li>如果field是text类型，match查询会将用户输入的关键字进行分词</li></ul></blockquote><h5 id="7-3-1-match查询"><a href="#7-3-1-match查询" class="headerlink" title="7.3.1 match查询"></a>7.3.1 match查询</h5><blockquote><p>用户输入一个关键字去匹配一个Field</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># match查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;smsContent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;【招商银行】尊贵的王五先生&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h5 id="7-3-2-match-all查询"><a href="#7-3-2-match-all查询" class="headerlink" title="7.3.2 match_all查询"></a>7.3.2 match_all查询</h5><blockquote><p>查询全部数据</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># match_all 查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>           # limit的第一个参数</span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span>           # limit的第二个参数</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>            # 指定根据哪个field做排序，不根据es的分数进行排序……</span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h5 id="7-3-3-multi-match查询"><a href="#7-3-3-multi-match查询" class="headerlink" title="7.3.3 multi_match查询"></a>7.3.3 multi_match查询</h5><blockquote><p>一个值匹配多个Field</p><p>提升ES的查询命中率……</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># multi_match</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;银行&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;corpName&quot;</span><span class="punctuation">,</span><span class="string">&quot;smsContent&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="7-4-range查询"><a href="#7-4-range查询" class="headerlink" title="7.4 range查询"></a>7.4 range查询</h4><blockquote><p>range查询可以实现范围检索</p><p>针对数值，时间和IP地址做范围查询</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># range 查询</span><br><span class="line"># 数值范围</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span>   </span><br><span class="line">        <span class="attr">&quot;lt&quot;</span><span class="punctuation">:</span> <span class="number">5</span>   </span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># 时间范围<span class="punctuation">,</span>      时间格式规定好，推荐都用时分秒，skr~~</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;sendDate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-09 02:11:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-09 05:59:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># ip范围</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;ipAddr&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9.126.2.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11.126.2.255&quot;</span>   </span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="7-5-Java与ES交互实现查询操作"><a href="#7-5-Java与ES交互实现查询操作" class="headerlink" title="7.5 Java与ES交互实现查询操作"></a>7.5 Java与ES交互实现查询操作</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  range范围查询，基于fee，查询1分到5分之间的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rangeQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. req</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. index</span></span><br><span class="line">        request.indices(<span class="string">&quot;sms_logs_index&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. body</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.rangeQuery(<span class="string">&quot;fee&quot;</span>).gte(<span class="number">1</span>).lte(<span class="number">5</span>));</span><br><span class="line">        sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        sourceBuilder.size(<span class="number">2</span>);</span><br><span class="line">        sourceBuilder.sort(<span class="string">&quot;fee&quot;</span>, SortOrder.ASC);</span><br><span class="line"></span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. execute</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">resp</span> <span class="operator">=</span> ESClientUtil.getClient().search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. source</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="八、ES的其他查询"><a href="#八、ES的其他查询" class="headerlink" title="八、ES的其他查询"></a>八、ES的其他查询</h3><h4 id="8-1-ids查询"><a href="#8-1-ids查询" class="headerlink" title="8.1 ids查询"></a>8.1 ids查询</h4><blockquote><p>ids是根据多个_id的值，直接拉取分片上的数据……</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># ids查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ids&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;values&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="string">&quot;3&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="8-2-prefix查询"><a href="#8-2-prefix查询" class="headerlink" title="8.2 prefix查询"></a>8.2 prefix查询</h4><blockquote><p>将用户输入的关键字去分词库中匹配term的前缀……</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># prefix查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;养车&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="8-3-fuzzy查询"><a href="#8-3-fuzzy查询" class="headerlink" title="8.3 fuzzy查询"></a>8.3 fuzzy查询</h4><blockquote><p>真正的模块查询，允许用户输入的关键字有错别字（错别字尽量出现在后面……）</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># fuzzy查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fuzzy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;盒马生鲜&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="8-4-wildcard查询"><a href="#8-4-wildcard查询" class="headerlink" title="8.4 wildcard查询"></a>8.4 wildcard查询</h4><blockquote><p>和MySQL中的like查询一样的通配、占位查询，</p><ul><li>MySQL%代表通配，_代表占位</li><li>wildcard中*代表通配，？代表占位</li></ul></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># wildcard查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;wildcard&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国????????&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="8-5-regexp查询"><a href="#8-5-regexp查询" class="headerlink" title="8.5 regexp查询"></a>8.5 regexp查询</h4><blockquote><p>基于正则表达式匹配分词库中的term</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># regexp查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;regexp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1390[0-9]&#123;7&#125;&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="九、ES的复合查询"><a href="#九、ES的复合查询" class="headerlink" title="九、ES的复合查询"></a>九、ES的复合查询</h3><blockquote><p>基于ES的query查询数据时，暂时只能一个条件一个条件的使用，没有办法将多个条件以一定的逻辑方式组合在一起。</p><p>ES也支持查询方式，允许多个条件封装到一起，这种查询叫<a href="">bool查询</a></p><p>只要公司项目用ES做全文检索，<a href="">100%用bool查询</a></p><p>bool查询提供了四种组合方式：</p><ul><li>must：等于MySQL的and</li><li>should：等于MySQL的or</li><li>must_not：等于MySQL的!</li><li>filter：在query的筛选基础上，再次做筛选，这次筛选不会计算分数</li></ul></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># bool查询</span><br><span class="line"># smsContent中包含先生  并且  fee大于等于<span class="number">5</span>分</span><br><span class="line"># 省份要么是北京，要么是上海</span><br><span class="line"># 公司名称不是     滴滴打车</span><br><span class="line"># 将上述结果再次筛选出手机号为 <span class="number">13900000000</span>的</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;smsContent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;先生&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;fee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北京&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西安&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;corpName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;滴滴打车&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;mobile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;13900000000&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;minimum_should_match&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h3 id="十、ES的高亮查询"><a href="#十、ES的高亮查询" class="headerlink" title="十、ES的高亮查询"></a>十、ES的高亮查询</h3><blockquote><p>将用户输入的关键字匹配项，以高亮的形式返回。</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 高亮查询</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;corpName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;滴滴打车&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;span style=&#x27;color:red;&#x27;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/span&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fragment_size&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span><span class="attr">&quot;corpName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>Java代码</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">matchQuery</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//1. req</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. index</span></span><br><span class="line">        request.indices(<span class="string">&quot;sms_logs_index&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. body</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;smsContent&quot;</span>,<span class="string">&quot;先生&quot;</span>));</span><br><span class="line">        sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        sourceBuilder.size(<span class="number">2</span>);</span><br><span class="line">        sourceBuilder.sort(<span class="string">&quot;fee&quot;</span>, SortOrder.ASC);</span><br><span class="line">        <span class="type">HighlightBuilder</span> <span class="variable">highligter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>();</span><br><span class="line">        highligter.fragmentSize(<span class="number">20</span>);</span><br><span class="line">        highligter.field(<span class="string">&quot;smsContent&quot;</span>);</span><br><span class="line">        highligter.preTags(<span class="string">&quot;&lt;span style=&#x27;color:red;&#x27;&gt;&quot;</span>);</span><br><span class="line">        highligter.postTags(<span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">        sourceBuilder.highlighter(highligter);</span><br><span class="line"></span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. execute</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">resp</span> <span class="operator">=</span> ESClientUtil.getClient().search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5. source</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : resp.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(hit.getSourceAsMap());</span><br><span class="line">            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();</span><br><span class="line">            <span class="type">HighlightField</span> <span class="variable">smsContent</span> <span class="operator">=</span> highlightFields.get(<span class="string">&quot;smsContent&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(smsContent != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">highlight</span> <span class="operator">=</span> smsContent.getFragments()[<span class="number">0</span>].toString();</span><br><span class="line">                System.out.println(<span class="string">&quot;highlight:&quot;</span> + highlight);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="十一、ES的聚合函数ES"><a href="#十一、ES的聚合函数ES" class="headerlink" title="十一、ES的聚合函数ES"></a>十一、ES的聚合函数ES</h3><p>提供了丰富的聚合函数在海量数据中做统计</p><blockquote><p>想MySQL提供的5种聚合函数，ES都支持……</p><p>ES提供的聚合函数特别多，挑几个常用的……</p></blockquote><h4 id="11-1-Extended-stats"><a href="#11-1-Extended-stats" class="headerlink" title="11.1 Extended_stats"></a>11.1 Extended_stats</h4><blockquote><p>查询出指定属性的count，min，max，sum，avg，平方和，方差，标准偏差…………</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数-Extended stats</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;heiheihei&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;extended_stats&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fee&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="11-2-Cardinality"><a href="#11-2-Cardinality" class="headerlink" title="11.2 Cardinality"></a>11.2 Cardinality</h4><blockquote><p>针对非text类型的属性做 <a href="">去重计数</a></p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数-Cardinality</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;xixixi&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;cardinality&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;createDate&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="11-3-Range统计"><a href="#11-3-Range统计" class="headerlink" title="11.3 Range统计"></a>11.3 Range统计</h4><blockquote><p>ES中针对Range范围统计提供了Range，DateRange，IPRange</p><p>可以统计范围内出现数据的数量。</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数-Range</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hahaha&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fee&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"># 聚合函数-DateRange</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hehehe&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;date_range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;createDate&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ranges&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-09 04:00:00&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-09 04:00:00&quot;</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-09 12:00:00&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-09-09 12:00:00&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="11-4-histogram"><a href="#11-4-histogram" class="headerlink" title="11.4 histogram"></a>11.4 histogram</h4><blockquote><p>根据指定的属性和间隔interval做范围统计</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数-histogram</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;eee&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;histogram&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fee&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 聚合函数-date_histogram</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;yesyesyes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;date_histogram&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;createDate&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="string">&quot;minute&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="11-5-terms"><a href="#11-5-terms" class="headerlink" title="11.5 terms"></a>11.5 terms</h4><blockquote><p>统计某个属性不同值出现的次数，并且可以基于order做排序，基于size做筛选条数</p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 聚合函数-terms</span><br><span class="line">POST /sms_logs_index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;yiku&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fee&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><h4 id="11-6-Java代码实现"><a href="#11-6-Java代码实现" class="headerlink" title="11.6 Java代码实现"></a>11.6 Java代码实现</h4><blockquote><p>向下转型问题！</p></blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 聚合函数Java实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zjw</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3Test</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">terms</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// request</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// index</span></span><br><span class="line">        request.indices(<span class="string">&quot;sms_logs_index&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// body</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">        sourceBuilder.aggregation(AggregationBuilders.terms(<span class="string">&quot;agg&quot;</span>).field(<span class="string">&quot;fee&quot;</span>).size(<span class="number">10</span>).order(BucketOrder.count(<span class="literal">false</span>)));</span><br><span class="line">        request.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// send,resp</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">resp</span> <span class="operator">=</span> ESClientUtil.getClient().search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// getData</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> resp.getAggregations();</span><br><span class="line">        <span class="comment">// 根据聚合函数的查询条件向下转型</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">agg</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;agg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : agg.getBuckets()) &#123;</span><br><span class="line">            System.out.println(bucket.getKey() +<span class="string">&quot;,&quot;</span> + bucket.getDocCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="十二、ES的GEO查询"><a href="#十二、ES的GEO查询" class="headerlink" title="十二、ES的GEO查询"></a>十二、ES的GEO查询</h3><blockquote><p>GEO查询就是基于经纬度做筛选。</p><p>一般经纬度筛选无法计算分数，会将基于GEO的查询统统滴放到filter中。</p><p>创建一个索引，指定一个属性的存储类型是<a href="">geo_point</a></p></blockquote><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"># 玩GEO，创建索引</span><br><span class="line">PUT /map </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 插入三条数据 北科，生命科学园地铁，巩华城地铁</span><br><span class="line">POST /map/_create/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;北科&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.125318</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.258312</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST /map/_create/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生命科学园地铁&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.101109</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.300721</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">POST /map/_create/<span class="number">3</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;巩华城地铁&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.13731</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.300344</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><p>GEO在ES中提供了三种查询方式</p><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 一个点，一个距离（半径）查询圆内数据</span><br><span class="line">POST /map/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="number">4700</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.125318</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.258312</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 两个点确定矩形</span><br><span class="line">POST /map/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;geo_bounding_box&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;top_left&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.109973</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.278192</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;bottom_right&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.093416</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.32131</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 多个点确定多边形</span><br><span class="line">POST /map/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;geo_polygon&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;points&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.143736</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.29084</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.127132</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.306003</span></span><br><span class="line">                <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">40.148479</span><span class="punctuation">,</span></span><br><span class="line">                  <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">116.313549</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Elasticsearch&quot;&gt;&lt;a href=&quot;#Elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch&quot;&gt;&lt;/a&gt;Elasticsearch&lt;/h1&gt;&lt;h3 id=&quot;一、现存问题&quot;&gt;&lt;a href=&quot;#一、现</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://www.yangcc.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Volatile关键字</title>
    <link href="https://www.yangcc.top/1069363226/"/>
    <id>https://www.yangcc.top/1069363226/</id>
    <published>2021-08-11T16:00:00.000Z</published>
    <updated>2021-08-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-内存模型"><a href="#1-内存模型" class="headerlink" title="1 内存模型"></a>1 内存模型</h3><h4 id="缓存不一致问题"><a href="#缓存不一致问题" class="headerlink" title="缓存不一致问题"></a>缓存不一致问题</h4><p>计算机在执行程序时，每条指令都是在CPU中执行的，而执行指令过程中，势必涉及到数据的读取和写入。由于程序运行过程中的临时数据是存放在主存（物理内存）当中的，这时就存在一个问题，由于CPU执行速度很快，而从内存读取数据和向内存写入数据的过程跟CPU执行指令的速度比起来要慢的多，因此如果任何时候对数据的操作都要通过和内存的交互来进行，会大大降低指令执行的速度。因此在CPU里面就有了高速缓存。</p><p>也就是，当程序在运行过程中，<code>会将运算需要的数据从主存复制一份到CPU的高速缓存当中</code>，那么CPU进行计算时就可以直接从它的高速缓存读取数据和向其中写入数据，当运算结束之后，再将高速缓存中的数据刷新到主存当中。</p><p>比如有一段代码：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 理想情况是两个线程都执行一次，最后的结果为2</span></span><br><span class="line">i = i +<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><p>此代码在单线程执行没有任何问题,而在多线程运行会被覆盖。</p><div class="highlight-container" data-rel="Tex"><figure class="iseeu highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">线程1：</span><br><span class="line">读取i=0放到高速缓冲区 ——&gt; i+1 ——&gt; 刷线数据到主存，i=1</span><br><span class="line">线程2：</span><br><span class="line">读取i=0放到高速缓冲区 ——&gt; i+1 ——&gt; 刷线数据到主存，i=1</span><br></pre></td></tr></table></figure></div><blockquote><p>因为在多核心cpu中每个线程可能运行于不同的cpu，因此有可能每个线程的高速缓存不是同一个。</p><p>而单核心cpu，是线程调度的，要么分时执行，要么抢占执行，但结果和多核心都是一样的。</p></blockquote><hr><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>为了解决缓存不一致性问题，通常来说有以下2种解决方法：这2种方式都是 <code>硬件</code>层面上提供的方式。</p><ul><li>通过在总线加LOCK锁的方式</li></ul><p>在早期的CPU当中，是通过在总线上加LOCK锁的形式来解决缓存不一致的问题。因为CPU和其他部件进行通信都是通过总线来进行的，如果对总线加LOCK锁的话，也就是说阻塞了其他CPU对其他部件访问（如内存），从而使得只能有一个 <code>CPU能使用这个变量的内存</code>。</p><ul><li>通过缓存一致性协议</li></ul><p>上面的方式会有一个问题，由于在锁住总线期间，其他CPU无法访问内存，导致 <code>效率低下</code>。所以就出现了缓存一致性协议。最出名的就是Intel 的MESI协议，MESI协议保证了每个缓存中使用的共享变量的副本是一致的。它核心的思想是：当CPU写数据时，如果发现操作的变量是共享变量，即在其他CPU中也存在该变量的副本，会发出信号通知其他CPU将该变量的缓存行置为无效状态，因此当其他CPU需要读取这个变量时，发现自己缓存中缓存该变量的缓存行是无效的，那么它就会从内存重新读取。</p><h3 id="2-并发编程"><a href="#2-并发编程" class="headerlink" title="2 并发编程"></a>2 并发编程</h3><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><p>与数据库那个原子性一个概念，就是两个操作是一体的，要么都执行，要么都不执行</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>当多个线程访问同一个变量的时候，一个线程修改了值，另外的线程能够立刻看到修改的值</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>程序是按照代码的顺序执行的，但JVM在真正执行这段代码的时候不一定能保证是按照顺序执行的，因为可能发生 <code>指令重排序（Instruction Reorder）</code></p><blockquote><p>处理器为了提高程序运行效率，可能会对输入代码进行 <code>优化</code>，它不保证程序中各个语句的执行先后顺序同代码中的顺序一致，但是它会保证程序最终执行结果和代码顺序执行的结果是一致的。</p><p>而处理器在进行重排序时是会考虑指令之间的数据依赖性，如果指定2必须要用到指令1，则指令1一定会在指令2之前运行的。<code>指令重排序不会影响单个线程的执行，但是会影响到线程并发执行的正确性。</code></p></blockquote><p>想要让程序正常的执行，必须要保证满足这三个条件</p><h3 id="3-java内存模型"><a href="#3-java内存模型" class="headerlink" title="3 java内存模型"></a>3 java内存模型</h3><blockquote><p>在Java虚拟机规范中试图定义一种 <code>Java内存模型（Java Memory Model，JMM）</code>来屏蔽各个硬件平台和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的内存访问效果。它定义了程序中变量的访问规则，往大一点说是定义了程序执行的次序。注意，为了获得较好的执行性能，Java内存模型并没有限制执行引擎使用处理器的寄存器或者高速缓存来提升指令执行速度，也没有限制编译器对指令进行重排序。也就是说，<code>在java内存模型中，也会存在缓存一致性问题和指令重排序的问题</code>。Java内存模型规定所有的变量都是存在主存当中（类似于前面说的物理内存），每个线程都有自己的工作内存（类似于前面的高速缓存）。线程对变量的所有操作都必须在工作内存中进行，而不能直接对主存进行操作。并且每个线程不能访问其他线程的工作内存。</p></blockquote><p>总结来说JVM中每个线程都有自己独立的虚拟机栈来执行自己的方法，这样如同操作系统的高速缓冲一样，存在可见性问题。</p><h3 id="4-如何保证三个特性"><a href="#4-如何保证三个特性" class="headerlink" title="4 如何保证三个特性"></a>4 如何保证三个特性</h3><h4 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h4><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x =<span class="number">8</span>;</span><br><span class="line">y = x;  <span class="comment">// 包含两步，读取x值，赋值给y</span></span><br><span class="line">x++;    <span class="comment">// 包含三步，读取x值，x+1，赋值给x</span></span><br><span class="line">x = x+<span class="number">1</span>;</span><br></pre></td></tr></table></figure></div><p>上面四个操作只有操作1是原子操作，java中只有 <code>赋值</code>，和 <code>读取值</code>是原子操作，如果要保证多个操作整体具有原子性，需要同步或者锁来实现(synchronized和Lock)</p><h4 id="可见性-1"><a href="#可见性-1" class="headerlink" title="可见性"></a>可见性</h4><p>对于可见性，Java提供了volatile关键字来保证可见性。当一个共享变量被volatile修饰时，它会保证修改的值会立即被更新到主存，当有其他线程需要读取时，它会去内存中读取新值。</p><p>另外，还可通过synchronized和Lock也能够保证可见性，synchronized和Lock能保证同一时刻只有一个线程获取锁然后执行同步代码，并且在释放锁之前会将对变量的修改刷新到主存当中。因此可以保证可见性。</p><h4 id="有序性-1"><a href="#有序性-1" class="headerlink" title="有序性"></a>有序性</h4><p>在Java内存模型中，允许编译器和处理器对指令进行重排序，单线程程序没有问题，多线程会出现有序性问题。</p><blockquote><p>Java内存模型具备一些先天的“有序性”，即不需要通过任何手段就能够得到保证的有序性，这个通常也称为 <code>happens-before 原则</code>。如果两个操作的执行次序无法从happens-before原则推导出来，那么它们就不能保证它们的有序性，虚拟机可以随意地对它们进行重排序。</p><p>下面就来具体介绍下happens-before原则（先行发生原则）：</p><ul><li>程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li></ul><ul><li>锁定规则：一个unLock操作先行发生于后面对同一个锁额lock操作</li><li>volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作</li><li>传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C</li></ul></blockquote><h2 id="二-JUC"><a href="#二-JUC" class="headerlink" title="二 JUC"></a>二 JUC</h2><h3 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1 关键字"></a>1 关键字</h3><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h4><p>一个变量被此关键字修饰后就具备了如下特点：</p><ul><li>保证了不同线程对这个变量进行操作时的 <code>可见性</code>，当一个变量被volatile修饰时，那么对它的修改会立刻刷新到主存,当其它线程需要读取该变量时，会去内存中读取新值。</li><li>禁止进行指令重排序。</li></ul><p>使用volatile关键字并不能保证原子性，如下这段代码，输出的值很随机，正常应该是10000才对。</p><p>因为 <code>a++</code>这个代码不是原子性的，包含几个步骤：读取,加1，写入内存，三步。因此，此段代码就有可能这样执行：</p><blockquote><p>某个时刻  a &#x3D; 10</p><p>线程1 ——&gt; 读取a&#x3D;10 a自增</p><p>线程2 ——&gt; 读取到a&#x3D;10 然后因为此时有别的线程正在进行修改，因此进入阻塞状态</p><p>线程3 ——&gt; 此时恰好修改a值那个线程结束了，因此读到是内存中的a &#x3D; 11，然和进行自增操作为 a&#x3D;12</p><p>线程2 ——&gt; 接着对a进行自增操作,a&#x3D;11</p><p>这样三个线程自增结果却只+1，原因就在于自增操作不是原子的</p></blockquote><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">a</span>  <span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 自增操作</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">()</span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 10个线程每个线程让a+1，1000次</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Test0</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test0</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;<span class="number">1000</span>; j++) &#123;</span><br><span class="line">                        test.setA();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>); <span class="comment">// 保证上面执行完成</span></span><br><span class="line">        System.out.println(test.a); <span class="comment">// 数值随机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>有三种方式来解决原子性问题：</p><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 同步</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">()</span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 锁</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">()</span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    a++;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3 原子整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">AtomicInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">setA</span><span class="params">()</span>&#123;</span><br><span class="line">    a.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>原理和实现机制</p><blockquote><p>　　下面这段话摘自《深入理解Java虚拟机》：</p><p>　　“观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p><p>　　lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：</p><p>　　1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；</p><p>　　2）它会强制将对缓存的修改操作立即写入主存；</p><p>　　3）如果是写操作，它会导致其他CPU中对应的缓存行无效。</p></blockquote><p>使用场景</p><ol><li>单例模式</li></ol><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双重检查锁定模式 （Double check locked）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Test4 test4 ;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test4</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Test4 <span class="title function_">getTest4</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (test4==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Test4.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (test4==<span class="literal">null</span>)&#123;</span><br><span class="line">                    test4 = <span class="keyword">new</span> <span class="title class_">Test4</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> test4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>刚开始是有疑问的，感觉volatile关键字根本没必要呀，其实是为了禁止指令重排，保证 <code>test4 = new Test4()</code>顺序执行，创建对象并赋值有如下的虚拟机指令：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0: new   // 创建一个对象，在堆内开辟空间，并将地址放入虚拟机栈顶            </span><br><span class="line">3: dup   // 复制操作数栈顶值，并将其压入栈顶，也就是说此时操作数栈上有连续相同的两个对象地址；</span><br><span class="line">4: invokespecial #3 //执行构造方法             </span><br><span class="line">7: astore_1 // 将地址赋值</span><br></pre></td></tr></table></figure></div><ol><li>创建对象分配堆空间</li><li>执行构造方法</li><li>将对象地址赋值给变量</li></ol><p>上面这三个步骤，2，3是依赖一的，所以2，3一定会在1之后执行，而2，3可能会因为指令重排而发生 <code>3执行在2之前</code>，因此可能会出现下面的情况：</p><table><thead><tr><th></th><th>线程1</th><th>线程2</th></tr></thead><tbody><tr><td>1</td><td>判断是否为null(true)</td><td></td></tr><tr><td>2</td><td>获取锁</td><td></td></tr><tr><td>3</td><td>判断是否为null(true)</td><td></td></tr><tr><td>4</td><td>发生指令重排</td><td></td></tr><tr><td>5</td><td>创建对象</td><td></td></tr><tr><td>6</td><td>将对象地址赋值给变量</td><td>判断是否为null(false)</td></tr><tr><td>7</td><td></td><td>return</td></tr><tr><td>8</td><td>执行构造方法</td><td></td></tr></tbody></table><p>在线程1执行构造方法之前，线程2直接将没有初始化的地址返回了，因此线程2要执行操作的时候会出现问题，比如线程1在构造方法对成员变量进行赋值，而线程2获取时候发现还是默认值。</p><p>因此volatile的重要性就体现出来了，禁止指令重排序将保证上述问题不会发生。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a class="link"   href="https://www.cnblogs.com/dolphin0520/p/3920373.html" >Java并发编程：volatile关键字解析 - Matrix海子 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p><a class="link"   href="https://www.cnblogs.com/zhuifeng523/p/11360012.html" >双重检查锁单例模式为什么要用volatile关键字？ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-内存模型&quot;&gt;&lt;a href=&quot;#1-内存模型&quot; class=&quot;headerlink&quot; title=&quot;1 内存模型&quot;&gt;&lt;/a&gt;1 内存模型&lt;/h3&gt;&lt;h4 id=&quot;缓存不一致问题&quot;&gt;&lt;a href=&quot;#缓存不一致问题&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="技术" scheme="https://www.yangcc.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="Java" scheme="https://www.yangcc.top/tags/Java/"/>
    
  </entry>
  
</feed>
